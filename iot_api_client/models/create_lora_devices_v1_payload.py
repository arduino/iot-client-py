# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateLoraDevicesV1Payload(BaseModel):
    """
    CreateLoraDevicesV1Payload
    """ # noqa: E501
    app: StrictStr = Field(description="The app name")
    app_eui: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The app eui of the lora device")
    app_key: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The app key of the lora device")
    eui: Annotated[str, Field(strict=True)] = Field(description="The eui of the lora device")
    frequency_plan: StrictStr = Field(description="The frequency plan required by your country ")
    name: StrictStr = Field(description="A common name for the device")
    serial: Optional[StrictStr] = Field(default=None, description="The optional serial number")
    type: StrictStr = Field(description="The type of device")
    user_id: StrictStr = Field(description="The id of the user. Can be the special string 'me'")
    __properties: ClassVar[List[str]] = ["app", "app_eui", "app_key", "eui", "frequency_plan", "name", "serial", "type", "user_id"]

    @field_validator('app_eui')
    def app_eui_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9a-z]{16}", value):
            raise ValueError(r"must validate the regular expression /[0-9a-z]{16}/")
        return value

    @field_validator('app_key')
    def app_key_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9a-z]{16}", value):
            raise ValueError(r"must validate the regular expression /[0-9a-z]{16}/")
        return value

    @field_validator('eui')
    def eui_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[0-9a-z]{16}", value):
            raise ValueError(r"must validate the regular expression /[0-9a-z]{16}/")
        return value

    @field_validator('frequency_plan')
    def frequency_plan_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['EU_863_870_TTN', 'US_902_928_FSB_2', 'EU_433', 'AU_915_928_FSB_2', 'CN_470_510_FSB_11', 'AS_920_923', 'AS_920_923_TTN_AU', 'AS_923_925', 'AS_923_925_TTN_AU', 'KR_920_923_TTN', 'IN_865_867']):
            raise ValueError("must be one of enum values ('EU_863_870_TTN', 'US_902_928_FSB_2', 'EU_433', 'AU_915_928_FSB_2', 'CN_470_510_FSB_11', 'AS_920_923', 'AS_920_923_TTN_AU', 'AS_923_925', 'AS_923_925_TTN_AU', 'KR_920_923_TTN', 'IN_865_867')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['lora-device', 'mkrwan1300', 'mkrwan1310']):
            raise ValueError("must be one of enum values ('lora-device', 'mkrwan1300', 'mkrwan1310')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateLoraDevicesV1Payload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateLoraDevicesV1Payload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app": obj.get("app"),
            "app_eui": obj.get("app_eui"),
            "app_key": obj.get("app_key"),
            "eui": obj.get("eui"),
            "frequency_plan": obj.get("frequency_plan"),
            "name": obj.get("name"),
            "serial": obj.get("serial"),
            "type": obj.get("type"),
            "user_id": obj.get("user_id")
        })
        return _obj


