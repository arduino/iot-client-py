# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from iot_api_client.models.arduino_compressedv2 import ArduinoCompressedv2
from typing import Optional, Set
from typing_extensions import Self

class ArduinoDevicev2Cert(BaseModel):
    """
    DeviceCertV2 describes a certificate associated to the device (default view)
    """ # noqa: E501
    ca: Optional[StrictStr] = Field(default=None, description="The Certification Authority used to sign the certificate")
    compressed: ArduinoCompressedv2
    der: StrictStr = Field(description="The certificate in DER format")
    device_id: StrictStr = Field(description="The unique identifier of the device")
    enabled: StrictBool = Field(description="Whether the certificate is enabled")
    href: StrictStr = Field(description="The api reference of this cert")
    id: StrictStr = Field(description="The unique identifier of the key")
    pem: Annotated[str, Field(strict=True, max_length=512)] = Field(description="The certificate in pem format")
    __properties: ClassVar[List[str]] = ["ca", "compressed", "der", "device_id", "enabled", "href", "id", "pem"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArduinoDevicev2Cert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compressed
        if self.compressed:
            _dict['compressed'] = self.compressed.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArduinoDevicev2Cert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ca": obj.get("ca"),
            "compressed": ArduinoCompressedv2.from_dict(obj["compressed"]) if obj.get("compressed") is not None else None,
            "der": obj.get("der"),
            "device_id": obj.get("device_id"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "href": obj.get("href"),
            "id": obj.get("id"),
            "pem": obj.get("pem")
        })
        return _obj


