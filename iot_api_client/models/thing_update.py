# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from iot_api_client.models.model_property import ModelProperty
from typing import Optional, Set
from typing_extensions import Self

class ThingUpdate(BaseModel):
    """
    Payload to update an existing thing
    """ # noqa: E501
    assistant: Optional[StrictStr] = Field(default=None, description="The kind of voice assistant the thing is connected to, it can be ALEXA | GOOGLE | NONE")
    device_id: Optional[StrictStr] = Field(default=None, description="The arn of the associated device")
    id: Optional[StrictStr] = Field(default=None, description="The id of the thing")
    name: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The friendly name of the thing")
    properties: Optional[List[ModelProperty]] = Field(default=None, description="The properties of the thing")
    timezone: Optional[StrictStr] = Field(default=None, description="A time zone name. Check /v2/timezones for a list of valid names.")
    webhook_active: Optional[StrictBool] = Field(default=None, description="Webhook uri")
    webhook_uri: Optional[StrictStr] = Field(default=None, description="Webhook uri")
    __properties: ClassVar[List[str]] = ["assistant", "device_id", "id", "name", "properties", "timezone", "webhook_active", "webhook_uri"]

    @field_validator('assistant')
    def assistant_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALEXA', 'GOOGLE', 'NONE']):
            raise ValueError("must be one of enum values ('ALEXA', 'GOOGLE', 'NONE')")
        return value

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9_. -]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_. -]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThingUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThingUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assistant": obj.get("assistant"),
            "device_id": obj.get("device_id"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "properties": [ModelProperty.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "timezone": obj.get("timezone"),
            "webhook_active": obj.get("webhook_active"),
            "webhook_uri": obj.get("webhook_uri")
        })
        return _obj


