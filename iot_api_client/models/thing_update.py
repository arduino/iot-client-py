# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from iot_api_client.models.model_property import ModelProperty

class ThingUpdate(BaseModel):
    """
    Payload to update an existing thing
    """
    assistant: Optional[StrictStr] = Field(None, description="The kind of voice assistant the thing is connected to, it can be ALEXA | GOOGLE | NONE")
    device_id: Optional[StrictStr] = Field(None, description="The arn of the associated device")
    id: Optional[StrictStr] = Field(None, description="The id of the thing")
    name: Optional[constr(strict=True, max_length=64)] = Field(None, description="The friendly name of the thing")
    properties: Optional[conlist(ModelProperty)] = Field(None, description="The properties of the thing")
    timezone: Optional[StrictStr] = Field(None, description="A time zone name. Check /v2/timezones for a list of valid names.")
    webhook_active: Optional[StrictBool] = Field(None, description="Webhook uri")
    webhook_uri: Optional[StrictStr] = Field(None, description="Webhook uri")
    __properties = ["assistant", "device_id", "id", "name", "properties", "timezone", "webhook_active", "webhook_uri"]

    @validator('assistant')
    def assistant_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ALEXA', 'GOOGLE', 'NONE'):
            raise ValueError("must be one of enum values ('ALEXA', 'GOOGLE', 'NONE')")
        return value

    @validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9_. -]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_. -]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ThingUpdate:
        """Create an instance of ThingUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item in self.properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ThingUpdate:
        """Create an instance of ThingUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ThingUpdate.parse_obj(obj)

        _obj = ThingUpdate.parse_obj({
            "assistant": obj.get("assistant"),
            "device_id": obj.get("device_id"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "properties": [ModelProperty.from_dict(_item) for _item in obj.get("properties")] if obj.get("properties") is not None else None,
            "timezone": obj.get("timezone"),
            "webhook_active": obj.get("webhook_active"),
            "webhook_uri": obj.get("webhook_uri")
        })
        return _obj


