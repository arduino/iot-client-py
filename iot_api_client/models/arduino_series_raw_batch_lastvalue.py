# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from iot_api_client.models.arduino_series_raw_last_value_response import ArduinoSeriesRawLastValueResponse

class ArduinoSeriesRawBatchLastvalue(BaseModel):
    """
    ArduinoSeriesRawBatchLastvalue media type (default view)
    """
    responses: conlist(ArduinoSeriesRawLastValueResponse) = Field(..., description="Responses of the request")
    status: StrictStr = Field(..., description="Status of the response")
    __properties = ["responses", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ArduinoSeriesRawBatchLastvalue:
        """Create an instance of ArduinoSeriesRawBatchLastvalue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in responses (list)
        _items = []
        if self.responses:
            for _item in self.responses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['responses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ArduinoSeriesRawBatchLastvalue:
        """Create an instance of ArduinoSeriesRawBatchLastvalue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArduinoSeriesRawBatchLastvalue.parse_obj(obj)

        _obj = ArduinoSeriesRawBatchLastvalue.parse_obj({
            "responses": [ArduinoSeriesRawLastValueResponse.from_dict(_item) for _item in obj.get("responses")] if obj.get("responses") is not None else None,
            "status": obj.get("status")
        })
        return _obj


