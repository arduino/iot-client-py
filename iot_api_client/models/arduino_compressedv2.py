# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ArduinoCompressedv2(BaseModel):
    """
    compressed contains the info from which to generate the certificate (default view)
    """ # noqa: E501
    authority_key_identifier: Optional[StrictStr] = Field(default=None, description="The Authority Key Identifier of the certificate")
    not_after: datetime = Field(description="The ending date of the certificate")
    not_before: datetime = Field(description="The starting date of the certificate")
    serial: StrictStr = Field(description="The serial number of the certificate")
    signature: StrictStr = Field(description="The signature of the certificate")
    signature_asn1_x: StrictStr = Field(description="The ASN1 X component of certificate signature")
    signature_asn1_y: StrictStr = Field(description="The ASN1 Y component of certificate signature")
    __properties: ClassVar[List[str]] = ["authority_key_identifier", "not_after", "not_before", "serial", "signature", "signature_asn1_x", "signature_asn1_y"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArduinoCompressedv2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArduinoCompressedv2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authority_key_identifier": obj.get("authority_key_identifier"),
            "not_after": obj.get("not_after"),
            "not_before": obj.get("not_before"),
            "serial": obj.get("serial"),
            "signature": obj.get("signature"),
            "signature_asn1_x": obj.get("signature_asn1_x"),
            "signature_asn1_y": obj.get("signature_asn1_y")
        })
        return _obj


