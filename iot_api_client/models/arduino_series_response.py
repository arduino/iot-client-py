# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ArduinoSeriesResponse(BaseModel):
    """
    ArduinoSeriesResponse media type (default view)
    """ # noqa: E501
    aggregation: Optional[StrictStr] = Field(default=None, description="Aggregation statistic function. For numeric values, AVG statistic is used by default. PCT_X compute the Xth approximate percentile (e.g. PCT_95 is the 95th approximate percentile). For boolean, BOOL_OR statistic is used as default.")
    count_values: StrictInt = Field(description="Total number of values in the array 'values'")
    from_date: datetime = Field(description="From date")
    interval: StrictInt = Field(description="Resolution in seconds")
    message: Optional[StrictStr] = Field(default='', description="If the response is different than 'ok'")
    property_id: Optional[StrictStr] = Field(default=None, description="Property id")
    property_name: Optional[StrictStr] = Field(default=None, description="Property name")
    property_type: Optional[StrictStr] = Field(default=None, description="Property type")
    query: StrictStr = Field(description="Query of for the data")
    resp_version: StrictInt = Field(description="Response version")
    series_limit: Optional[StrictInt] = Field(default=None, description="Maximum number of values returned after data aggregation, if any")
    status: StrictStr = Field(description="Status of the response")
    thing_id: Optional[StrictStr] = Field(default=None, description="Thing id")
    times: List[datetime] = Field(description="Timestamp in RFC3339")
    to_date: datetime = Field(description="To date")
    values: List[Union[StrictFloat, StrictInt]] = Field(description="Values in Float")
    __properties: ClassVar[List[str]] = ["aggregation", "count_values", "from_date", "interval", "message", "property_id", "property_name", "property_type", "query", "resp_version", "series_limit", "status", "thing_id", "times", "to_date", "values"]

    @field_validator('aggregation')
    def aggregation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AVG', 'MIN', 'MAX', 'SUM', 'COUNT', 'PCT_99', 'PCT_95', 'PCT_90', 'PCT_75', 'PCT_50', 'PCT_15', 'PCT_5', 'BOOL_OR', 'BOOL_AND']):
            raise ValueError("must be one of enum values ('AVG', 'MIN', 'MAX', 'SUM', 'COUNT', 'PCT_99', 'PCT_95', 'PCT_90', 'PCT_75', 'PCT_50', 'PCT_15', 'PCT_5', 'BOOL_OR', 'BOOL_AND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArduinoSeriesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArduinoSeriesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregation": obj.get("aggregation"),
            "count_values": obj.get("count_values"),
            "from_date": obj.get("from_date"),
            "interval": obj.get("interval"),
            "message": obj.get("message") if obj.get("message") is not None else '',
            "property_id": obj.get("property_id"),
            "property_name": obj.get("property_name"),
            "property_type": obj.get("property_type"),
            "query": obj.get("query"),
            "resp_version": obj.get("resp_version"),
            "series_limit": obj.get("series_limit"),
            "status": obj.get("status"),
            "thing_id": obj.get("thing_id"),
            "times": obj.get("times"),
            "to_date": obj.get("to_date"),
            "values": obj.get("values")
        })
        return _obj


