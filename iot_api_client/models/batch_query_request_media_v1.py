# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iot_api_client.configuration import Configuration


class BatchQueryRequestMediaV1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_from': 'datetime',
        'interval': 'int',
        'q': 'str',
        'series_limit': 'int',
        'to': 'datetime'
    }

    attribute_map = {
        '_from': 'from',
        'interval': 'interval',
        'q': 'q',
        'series_limit': 'series_limit',
        'to': 'to'
    }

    def __init__(self, _from=None, interval=None, q=None, series_limit=None, to=None, local_vars_configuration=None):  # noqa: E501
        """BatchQueryRequestMediaV1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__from = None
        self._interval = None
        self._q = None
        self._series_limit = None
        self._to = None
        self.discriminator = None

        self._from = _from
        if interval is not None:
            self.interval = interval
        self.q = q
        if series_limit is not None:
            self.series_limit = series_limit
        self.to = to

    @property
    def _from(self):
        """Gets the _from of this BatchQueryRequestMediaV1.  # noqa: E501

        From timestamp  # noqa: E501

        :return: The _from of this BatchQueryRequestMediaV1.  # noqa: E501
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this BatchQueryRequestMediaV1.

        From timestamp  # noqa: E501

        :param _from: The _from of this BatchQueryRequestMediaV1.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and _from is None:  # noqa: E501
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def interval(self):
        """Gets the interval of this BatchQueryRequestMediaV1.  # noqa: E501

        Resolution in seconds  # noqa: E501

        :return: The interval of this BatchQueryRequestMediaV1.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this BatchQueryRequestMediaV1.

        Resolution in seconds  # noqa: E501

        :param interval: The interval of this BatchQueryRequestMediaV1.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def q(self):
        """Gets the q of this BatchQueryRequestMediaV1.  # noqa: E501

        Query  # noqa: E501

        :return: The q of this BatchQueryRequestMediaV1.  # noqa: E501
        :rtype: str
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this BatchQueryRequestMediaV1.

        Query  # noqa: E501

        :param q: The q of this BatchQueryRequestMediaV1.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and q is None:  # noqa: E501
            raise ValueError("Invalid value for `q`, must not be `None`")  # noqa: E501

        self._q = q

    @property
    def series_limit(self):
        """Gets the series_limit of this BatchQueryRequestMediaV1.  # noqa: E501

        Max of values  # noqa: E501

        :return: The series_limit of this BatchQueryRequestMediaV1.  # noqa: E501
        :rtype: int
        """
        return self._series_limit

    @series_limit.setter
    def series_limit(self, series_limit):
        """Sets the series_limit of this BatchQueryRequestMediaV1.

        Max of values  # noqa: E501

        :param series_limit: The series_limit of this BatchQueryRequestMediaV1.  # noqa: E501
        :type: int
        """

        self._series_limit = series_limit

    @property
    def to(self):
        """Gets the to of this BatchQueryRequestMediaV1.  # noqa: E501

        To timestamp  # noqa: E501

        :return: The to of this BatchQueryRequestMediaV1.  # noqa: E501
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this BatchQueryRequestMediaV1.

        To timestamp  # noqa: E501

        :param to: The to of this BatchQueryRequestMediaV1.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and to is None:  # noqa: E501
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchQueryRequestMediaV1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchQueryRequestMediaV1):
            return True

        return self.to_dict() != other.to_dict()
