# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class ArduinoPropertytype(BaseModel):
    """
    ArduinoPropertytype media type (default view)
    """
    assistants: Optional[conlist(StrictStr)] = Field(None, description="The voice assistants available for this type")
    declaration: StrictStr = Field(..., description="The c++ type we are using for this variable type")
    deprecated: StrictBool = Field(..., description="Tell if this type is deprecated")
    example: Optional[StrictStr] = Field(None, description="Example of use")
    name: StrictStr = Field(..., description="The friendly name of the property type")
    rw: StrictBool = Field(..., description="Tell if the type allow a R/W permission")
    superseded_by: Optional[StrictStr] = Field(None, alias="supersededBy", description="The type of property to use if it's deprecated")
    tags: Optional[conlist(StrictStr)] = Field(None, description="The tags related to the type")
    type: StrictStr = Field(..., description="The api reference of this type")
    units: Optional[conlist(StrictStr)] = Field(None, description="The measure units available for this type")
    __properties = ["assistants", "declaration", "deprecated", "example", "name", "rw", "supersededBy", "tags", "type", "units"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ArduinoPropertytype:
        """Create an instance of ArduinoPropertytype from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ArduinoPropertytype:
        """Create an instance of ArduinoPropertytype from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArduinoPropertytype.parse_obj(obj)

        _obj = ArduinoPropertytype.parse_obj({
            "assistants": obj.get("assistants"),
            "declaration": obj.get("declaration"),
            "deprecated": obj.get("deprecated"),
            "example": obj.get("example"),
            "name": obj.get("name"),
            "rw": obj.get("rw"),
            "superseded_by": obj.get("supersededBy"),
            "tags": obj.get("tags"),
            "type": obj.get("type"),
            "units": obj.get("units")
        })
        return _obj


