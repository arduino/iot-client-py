# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from iot_api_client.models.arduino_devicev2templatedevice import ArduinoDevicev2templatedevice
from iot_api_client.models.arduino_templateproperty import ArduinoTemplateproperty
from iot_api_client.models.tag import Tag

class ArduinoThingtemplate(BaseModel):
    """
    ArduinoThingtemplate media type (default view)
    """
    device_metadata: Optional[ArduinoDevicev2templatedevice] = None
    id: Optional[StrictStr] = Field(None, description="The friendly id of the thing")
    name: StrictStr = Field(..., description="The friendly name of the thing")
    organization_id: Optional[StrictStr] = Field(None, description="Id of the organization the thing belongs to")
    sketch_template: Optional[StrictStr] = Field(None, description="The ID of the template's sketch")
    tags: Optional[conlist(Tag)] = Field(None, description="Tags of the thing")
    timezone: StrictStr = Field(..., description="Time zone of the thing")
    variables: Optional[conlist(ArduinoTemplateproperty)] = Field(None, description="ArduinoTemplatepropertyCollection is the media type for an array of ArduinoTemplateproperty (default view)")
    webhook_uri: Optional[StrictStr] = Field(None, description="Webhook uri")
    __properties = ["device_metadata", "id", "name", "organization_id", "sketch_template", "tags", "timezone", "variables", "webhook_uri"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ArduinoThingtemplate:
        """Create an instance of ArduinoThingtemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of device_metadata
        if self.device_metadata:
            _dict['device_metadata'] = self.device_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item in self.variables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ArduinoThingtemplate:
        """Create an instance of ArduinoThingtemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArduinoThingtemplate.parse_obj(obj)

        _obj = ArduinoThingtemplate.parse_obj({
            "device_metadata": ArduinoDevicev2templatedevice.from_dict(obj.get("device_metadata")) if obj.get("device_metadata") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organization_id": obj.get("organization_id"),
            "sketch_template": obj.get("sketch_template"),
            "tags": [Tag.from_dict(_item) for _item in obj.get("tags")] if obj.get("tags") is not None else None,
            "timezone": obj.get("timezone"),
            "variables": [ArduinoTemplateproperty.from_dict(_item) for _item in obj.get("variables")] if obj.get("variables") is not None else None,
            "webhook_uri": obj.get("webhook_uri")
        })
        return _obj


