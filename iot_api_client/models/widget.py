# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class Widget(BaseModel):
    """
    Widget describes a dashboard widget
    """
    height: StrictInt = Field(..., description="Widget current height for desktop")
    height_mobile: Optional[StrictInt] = Field(None, description="Widget current height for mobile")
    id: StrictStr = Field(..., description="The UUID of the widget, set by client")
    name: Optional[StrictStr] = Field(None, description="The name of the widget")
    options: Dict[str, Any] = Field(..., description="Widget options")
    type: StrictStr = Field(..., description="The type of the widget")
    variables: Optional[conlist(StrictStr)] = None
    width: StrictInt = Field(..., description="Widget current width for desktop")
    width_mobile: Optional[StrictInt] = Field(None, description="Widget current width for mobile")
    x: StrictInt = Field(..., description="Widget x position for desktop")
    x_mobile: Optional[StrictInt] = Field(None, description="Widget x position for mobile")
    y: StrictInt = Field(..., description="Widget y position for desktop")
    y_mobile: Optional[StrictInt] = Field(None, description="Widget y position for mobile")
    __properties = ["height", "height_mobile", "id", "name", "options", "type", "variables", "width", "width_mobile", "x", "x_mobile", "y", "y_mobile"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Widget:
        """Create an instance of Widget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Widget:
        """Create an instance of Widget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Widget.parse_obj(obj)

        _obj = Widget.parse_obj({
            "height": obj.get("height"),
            "height_mobile": obj.get("height_mobile"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "options": obj.get("options"),
            "type": obj.get("type"),
            "variables": obj.get("variables"),
            "width": obj.get("width"),
            "width_mobile": obj.get("width_mobile"),
            "x": obj.get("x"),
            "x_mobile": obj.get("x_mobile"),
            "y": obj.get("y"),
            "y_mobile": obj.get("y_mobile")
        })
        return _obj


