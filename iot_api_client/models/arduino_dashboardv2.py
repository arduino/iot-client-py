# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from iot_api_client.models.arduino_dashboardowner import ArduinoDashboardowner
from iot_api_client.models.arduino_dashboardshare import ArduinoDashboardshare
from iot_api_client.models.arduino_widgetv2 import ArduinoWidgetv2

class ArduinoDashboardv2(BaseModel):
    """
    Dashboard is a collection of widgets (default view)
    """
    cover_image: Optional[constr(strict=True, max_length=1024)] = Field(None, description="The cover image of the dashboard")
    created_by: Optional[ArduinoDashboardowner] = None
    id: StrictStr = Field(..., description="The friendly name of the dashboard")
    name: StrictStr = Field(..., description="The friendly name of the dashboard")
    organization_id: Optional[StrictStr] = Field(None, description="Id of the organization the dashboard belongs to")
    shared_by: Optional[ArduinoDashboardshare] = None
    shared_with: Optional[conlist(ArduinoDashboardshare)] = Field(None, description="ArduinoDashboardshareCollection is the media type for an array of ArduinoDashboardshare (default view)")
    updated_at: datetime = Field(..., description="Last update date")
    widgets: Optional[conlist(ArduinoWidgetv2)] = Field(None, description="ArduinoWidgetv2Collection is the media type for an array of ArduinoWidgetv2 (default view)")
    __properties = ["cover_image", "created_by", "id", "name", "organization_id", "shared_by", "shared_with", "updated_at", "widgets"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ArduinoDashboardv2:
        """Create an instance of ArduinoDashboardv2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shared_by
        if self.shared_by:
            _dict['shared_by'] = self.shared_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shared_with (list)
        _items = []
        if self.shared_with:
            for _item in self.shared_with:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shared_with'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in widgets (list)
        _items = []
        if self.widgets:
            for _item in self.widgets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['widgets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ArduinoDashboardv2:
        """Create an instance of ArduinoDashboardv2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArduinoDashboardv2.parse_obj(obj)

        _obj = ArduinoDashboardv2.parse_obj({
            "cover_image": obj.get("cover_image"),
            "created_by": ArduinoDashboardowner.from_dict(obj.get("created_by")) if obj.get("created_by") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organization_id": obj.get("organization_id"),
            "shared_by": ArduinoDashboardshare.from_dict(obj.get("shared_by")) if obj.get("shared_by") is not None else None,
            "shared_with": [ArduinoDashboardshare.from_dict(_item) for _item in obj.get("shared_with")] if obj.get("shared_with") is not None else None,
            "updated_at": obj.get("updated_at"),
            "widgets": [ArduinoWidgetv2.from_dict(_item) for _item in obj.get("widgets")] if obj.get("widgets") is not None else None
        })
        return _obj


