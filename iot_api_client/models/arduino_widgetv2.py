# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iot_api_client.models.arduino_linkedvariable import ArduinoLinkedvariable
from typing import Optional, Set
from typing_extensions import Self

class ArduinoWidgetv2(BaseModel):
    """
    ArduinoWidgetv2 media type (default view)
    """ # noqa: E501
    has_permission_incompatibility: Optional[StrictBool] = Field(default=None, description="True if the linked variables permissions are incompatible with the widget")
    has_type_incompatibility: Optional[StrictBool] = Field(default=None, description="True if the linked variables types are incompatible with the widget")
    has_unlinked_variable: Optional[StrictBool] = Field(default=None, description="If it's true the widget is linked to a soft-deleted variable")
    height: StrictInt = Field(description="Widget current height for desktop")
    height_mobile: Optional[StrictInt] = Field(default=None, description="Widget current height for mobile")
    id: StrictStr = Field(description="The UUID of the widget, set by client")
    name: Optional[StrictStr] = Field(default=None, description="The name of the widget")
    options: Dict[str, Any] = Field(description="Widget options")
    type: StrictStr = Field(description="The type of the widget")
    variables: Optional[List[ArduinoLinkedvariable]] = Field(default=None, description="ArduinoLinkedvariableCollection is the media type for an array of ArduinoLinkedvariable (default view)")
    width: StrictInt = Field(description="Widget current width for desktop")
    width_mobile: Optional[StrictInt] = Field(default=None, description="Widget current width for mobile")
    x: StrictInt = Field(description="Widget x position for desktop")
    x_mobile: Optional[StrictInt] = Field(default=None, description="Widget x position for mobile")
    y: StrictInt = Field(description="Widget y position for desktop")
    y_mobile: Optional[StrictInt] = Field(default=None, description="Widget y position for mobile")
    __properties: ClassVar[List[str]] = ["has_permission_incompatibility", "has_type_incompatibility", "has_unlinked_variable", "height", "height_mobile", "id", "name", "options", "type", "variables", "width", "width_mobile", "x", "x_mobile", "y", "y_mobile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArduinoWidgetv2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item_variables in self.variables:
                if _item_variables:
                    _items.append(_item_variables.to_dict())
            _dict['variables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArduinoWidgetv2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "has_permission_incompatibility": obj.get("has_permission_incompatibility"),
            "has_type_incompatibility": obj.get("has_type_incompatibility"),
            "has_unlinked_variable": obj.get("has_unlinked_variable"),
            "height": obj.get("height"),
            "height_mobile": obj.get("height_mobile"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "options": obj.get("options"),
            "type": obj.get("type"),
            "variables": [ArduinoLinkedvariable.from_dict(_item) for _item in obj["variables"]] if obj.get("variables") is not None else None,
            "width": obj.get("width"),
            "width_mobile": obj.get("width_mobile"),
            "x": obj.get("x"),
            "x_mobile": obj.get("x_mobile"),
            "y": obj.get("y"),
            "y_mobile": obj.get("y_mobile")
        })
        return _obj


