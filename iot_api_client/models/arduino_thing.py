# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from iot_api_client.models.arduino_property import ArduinoProperty
from typing import Optional, Set
from typing_extensions import Self

class ArduinoThing(BaseModel):
    """
    ArduinoThing media type (default view)
    """ # noqa: E501
    assistant: Optional[StrictStr] = Field(default=None, description="The kind of voice assistant the thing is connected to, it can be ALEXA | GOOGLE | NONE")
    created_at: Optional[datetime] = Field(default=None, description="Creation date of the thing")
    deleted_at: Optional[datetime] = Field(default=None, description="Delete date of the thing")
    device_fqbn: Optional[StrictStr] = Field(default=None, description="The fqbn of the attached device, if any")
    device_id: Optional[StrictStr] = Field(default=None, description="The id of the device")
    device_name: Optional[StrictStr] = Field(default=None, description="The name of the attached device, if any")
    device_type: Optional[StrictStr] = Field(default=None, description="The type of the attached device, if any")
    href: StrictStr = Field(description="The api reference of this thing")
    id: StrictStr = Field(description="The id of the thing")
    name: StrictStr = Field(description="The friendly name of the thing")
    organization_id: Optional[StrictStr] = Field(default=None, description="Id of the organization the thing belongs to")
    properties: Optional[List[ArduinoProperty]] = Field(default=None, description="ArduinoPropertyCollection is the media type for an array of ArduinoProperty (default view)")
    properties_count: Optional[StrictInt] = Field(default=None, description="The number of properties of the thing")
    sketch_id: Optional[StrictStr] = Field(default=None, description="The id of the attached sketch")
    tags: Optional[Dict[str, Any]] = Field(default=None, description="Tags of the thing")
    timezone: StrictStr = Field(description="Time zone of the thing")
    updated_at: Optional[datetime] = Field(default=None, description="Update date of the thing")
    user_id: StrictStr = Field(description="The user id of the owner")
    webhook_active: Optional[StrictBool] = Field(default=None, description="Webhook uri")
    webhook_uri: Optional[StrictStr] = Field(default=None, description="Webhook uri")
    __properties: ClassVar[List[str]] = ["assistant", "created_at", "deleted_at", "device_fqbn", "device_id", "device_name", "device_type", "href", "id", "name", "organization_id", "properties", "properties_count", "sketch_id", "tags", "timezone", "updated_at", "user_id", "webhook_active", "webhook_uri"]

    @field_validator('assistant')
    def assistant_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALEXA', 'GOOGLE', 'NONE']):
            raise ValueError("must be one of enum values ('ALEXA', 'GOOGLE', 'NONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArduinoThing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArduinoThing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assistant": obj.get("assistant"),
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "device_fqbn": obj.get("device_fqbn"),
            "device_id": obj.get("device_id"),
            "device_name": obj.get("device_name"),
            "device_type": obj.get("device_type"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organization_id": obj.get("organization_id"),
            "properties": [ArduinoProperty.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "properties_count": obj.get("properties_count"),
            "sketch_id": obj.get("sketch_id"),
            "tags": obj.get("tags"),
            "timezone": obj.get("timezone"),
            "updated_at": obj.get("updated_at"),
            "user_id": obj.get("user_id"),
            "webhook_active": obj.get("webhook_active"),
            "webhook_uri": obj.get("webhook_uri")
        })
        return _obj


