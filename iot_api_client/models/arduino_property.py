# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ArduinoProperty(BaseModel):
    """
    ArduinoProperty media type (default view)
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="Creation date of the property")
    deleted_at: Optional[datetime] = Field(default=None, description="Delete date of the property")
    href: StrictStr = Field(description="The api reference of this property")
    id: StrictStr = Field(description="The id of the property")
    last_value: Optional[Any] = Field(default=None, description="Last value of this property")
    linked_to_trigger: Optional[StrictBool] = Field(default=None, description="Indicates if the property is involved in the activation of at least a trigger")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum value of this property")
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum value of this property")
    name: StrictStr = Field(description="The friendly name of the property")
    permission: StrictStr = Field(description="The permission of the property")
    persist: Optional[StrictBool] = Field(default=None, description="If true, data will persist into a timeseries database")
    sync_id: Optional[StrictStr] = Field(default=None, description="The id of the sync pool")
    tag: Optional[StrictInt] = Field(default=None, description="The integer id of the property")
    thing_id: StrictStr = Field(description="The id of the thing")
    thing_name: Optional[StrictStr] = Field(default=None, description="The name of the associated thing")
    type: StrictStr = Field(description="The type of the property")
    update_parameter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The update frequency in seconds, or the amount of the property has to change in order to trigger an update")
    update_strategy: StrictStr = Field(description="The update strategy for the property value")
    updated_at: Optional[datetime] = Field(default=None, description="Update date of the property")
    value_updated_at: Optional[datetime] = Field(default=None, description="Last update timestamp of this property")
    variable_name: Optional[StrictStr] = Field(default=None, description="The sketch variable name of the property")
    __properties: ClassVar[List[str]] = ["created_at", "deleted_at", "href", "id", "last_value", "linked_to_trigger", "max_value", "min_value", "name", "permission", "persist", "sync_id", "tag", "thing_id", "thing_name", "type", "update_parameter", "update_strategy", "updated_at", "value_updated_at", "variable_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArduinoProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_value (nullable) is None
        # and model_fields_set contains the field
        if self.last_value is None and "last_value" in self.model_fields_set:
            _dict['last_value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArduinoProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "last_value": obj.get("last_value"),
            "linked_to_trigger": obj.get("linked_to_trigger"),
            "max_value": obj.get("max_value"),
            "min_value": obj.get("min_value"),
            "name": obj.get("name"),
            "permission": obj.get("permission"),
            "persist": obj.get("persist"),
            "sync_id": obj.get("sync_id"),
            "tag": obj.get("tag"),
            "thing_id": obj.get("thing_id"),
            "thing_name": obj.get("thing_name"),
            "type": obj.get("type"),
            "update_parameter": obj.get("update_parameter"),
            "update_strategy": obj.get("update_strategy"),
            "updated_at": obj.get("updated_at"),
            "value_updated_at": obj.get("value_updated_at"),
            "variable_name": obj.get("variable_name")
        })
        return _obj


