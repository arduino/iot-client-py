# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Variable(BaseModel):
    """
    Variable
    """ # noqa: E501
    attribute: StrictStr = Field(description="The template expression that extracts the value from the respective entity")
    entity: StrictStr = Field(description="Type of the entity being referenced")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the referenced entity")
    placeholder: StrictStr = Field(description="Name of the variable as referenced by the expression")
    property_id: Optional[StrictStr] = Field(default=None, description="The ID of the property referenced entity")
    thing_id: Optional[StrictStr] = Field(default=None, description="The ID of the thing referenced entity")
    __properties: ClassVar[List[str]] = ["attribute", "entity", "id", "placeholder", "property_id", "thing_id"]

    @field_validator('attribute')
    def attribute_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ID', 'NAME', 'VALUE', 'TIMESTAMP', 'USERNAME', 'EMAIL', 'STATUS']):
            raise ValueError("must be one of enum values ('ID', 'NAME', 'VALUE', 'TIMESTAMP', 'USERNAME', 'EMAIL', 'STATUS')")
        return value

    @field_validator('entity')
    def entity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['RECIPIENT', 'USER', 'DEVICE', 'THING', 'PROPERTY', 'TRIGGERING_DEVICE']):
            raise ValueError("must be one of enum values ('RECIPIENT', 'USER', 'DEVICE', 'THING', 'PROPERTY', 'TRIGGERING_DEVICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Variable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Variable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attribute": obj.get("attribute"),
            "entity": obj.get("entity"),
            "id": obj.get("id"),
            "placeholder": obj.get("placeholder"),
            "property_id": obj.get("property_id"),
            "thing_id": obj.get("thing_id")
        })
        return _obj


