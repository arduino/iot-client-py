# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ModelProperty(BaseModel):
    """
    PropertyPayload describes a property of a thing. No field is mandatory
    """ # noqa: E501
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum value of this property")
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum value of this property")
    name: StrictStr = Field(description="The friendly name of the property")
    permission: StrictStr = Field(description="The permission of the property")
    persist: Optional[StrictBool] = Field(default=True, description="If true, data will persist into a timeseries database")
    tag: Optional[StrictInt] = Field(default=None, description="The integer id of the property")
    type: StrictStr = Field(description="The type of the property")
    update_parameter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The update frequency in seconds, or the amount of the property has to change in order to trigger an update")
    update_strategy: StrictStr = Field(description="The update strategy for the property value")
    variable_name: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The  sketch variable name of the property")
    __properties: ClassVar[List[str]] = ["max_value", "min_value", "name", "permission", "persist", "tag", "type", "update_parameter", "update_strategy", "variable_name"]

    @field_validator('permission')
    def permission_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['READ_ONLY', 'READ_WRITE']):
            raise ValueError("must be one of enum values ('READ_ONLY', 'READ_WRITE')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ANALOG', 'CHARSTRING', 'FLOAT', 'INT', 'LENGHT_C', 'LENGHT_I', 'LENGHT_M', 'PERCENTAGE', 'STATUS', 'TEMPERATURE_C', 'TEMPERATURE_F', 'METER', 'KILOGRAM', 'GRAM', 'SECOND', 'AMPERE', 'KELVIN', 'CANDELA', 'MOLE', 'HERTZ', 'RADIAN', 'STERADIAN', 'NEWTON', 'PASCAL', 'JOULE', 'WATT', 'COULOMB', 'VOLT', 'FARAD', 'OHM', 'SIEMENS', 'WEBER', 'TESLA', 'HENRY', 'DEGREES_CELSIUS', 'LUMEN', 'LUX', 'BECQUEREL', 'GRAY', 'SIEVERT', 'KATAL', 'SQUARE_METER', 'CUBIC_METER', 'LITER', 'METER_PER_SECOND', 'METER_PER_SQUARE_SECOND', 'CUBIC_METER_PER_SECOND', 'LITER_PER_SECOND', 'WATT_PER_SQUARE_METER', 'CANDELA_PER_SQUARE_METER', 'BIT', 'BIT_PER_SECOND', 'DEGREES_LATITUDE', 'DEGREES_LONGITUDE', 'PH_VALUE', 'DECIBEL', 'DECIBEL_1W', 'BEL', 'COUNT', 'RATIO_DIV', 'RATIO_MOD', 'PERCENTAGE_RELATIVE_HUMIDITY', 'PERCENTAGE_BATTERY_LEVEL', 'SECONDS_BATTERY_LEVEL', 'EVENT_RATE_SECOND', 'EVENT_RATE_MINUTE', 'HEART_RATE', 'HEART_BEATS', 'SIEMENS_PER_METER', 'LOCATION', 'COLOR_HSB', 'COLOR_RGB', 'GENERIC_COMPLEX_PROPERTY', 'HOME_COLORED_LIGHT', 'HOME_DIMMED_LIGHT', 'HOME_LIGHT', 'HOME_CONTACT_SENSOR', 'HOME_MOTION_SENSOR', 'HOME_SMART_PLUG', 'HOME_TEMPERATURE', 'HOME_TEMPERATURE_C', 'HOME_TEMPERATURE_F', 'HOME_SWITCH', 'HOME_TELEVISION', 'GOOGLE_HOME_COLORED_LIGHT', 'GOOGLE_HOME_DIMMED_LIGHT', 'GOOGLE_HOME_LIGHT', 'GOOGLE_HOME_CONTACT_SENSOR', 'GOOGLE_HOME_MOTION_SENSOR', 'GOOGLE_HOME_SMART_PLUG', 'GOOGLE_HOME_TEMPERATURE', 'GOOGLE_HOME_TEMPERATURE_C', 'GOOGLE_HOME_TEMPERATURE_F', 'GOOGLE_HOME_SWITCH', 'SMART_HOME_COLORED_LIGHT', 'SMART_HOME_DIMMED_LIGHT', 'SMART_HOME_LIGHT', 'SMART_HOME_CONTACT_SENSOR', 'SMART_HOME_MOTION_SENSOR', 'SMART_HOME_SMART_PLUG', 'SMART_HOME_TEMPERATURE', 'SMART_HOME_TEMPERATURE_C', 'SMART_HOME_TEMPERATURE_F', 'SMART_HOME_SWITCH', 'SMART_HOME_TELEVISION', 'ENERGY', 'FORCE', 'TEMPERATURE', 'POWER', 'ELECTRIC_CURRENT', 'ELECTRIC_POTENTIAL', 'ELECTRICAL_RESISTANCE', 'CAPACITANCE', 'TIME', 'FREQUENCY', 'DATA_RATE', 'ACCELERATION', 'AREA', 'LENGTH', 'VELOCITY', 'MASS', 'VOLUME', 'FLOW_RATE', 'ANGLE', 'ILLUMINANCE', 'LUMINOUS_FLUX', 'LUMINANCE', 'LUMINOUS_INTENSITY', 'LOGARITHMIC_QUANTITY', 'PRESSURE', 'INFORMATION_CONTENT', 'SCHEDULE']):
            raise ValueError("must be one of enum values ('ANALOG', 'CHARSTRING', 'FLOAT', 'INT', 'LENGHT_C', 'LENGHT_I', 'LENGHT_M', 'PERCENTAGE', 'STATUS', 'TEMPERATURE_C', 'TEMPERATURE_F', 'METER', 'KILOGRAM', 'GRAM', 'SECOND', 'AMPERE', 'KELVIN', 'CANDELA', 'MOLE', 'HERTZ', 'RADIAN', 'STERADIAN', 'NEWTON', 'PASCAL', 'JOULE', 'WATT', 'COULOMB', 'VOLT', 'FARAD', 'OHM', 'SIEMENS', 'WEBER', 'TESLA', 'HENRY', 'DEGREES_CELSIUS', 'LUMEN', 'LUX', 'BECQUEREL', 'GRAY', 'SIEVERT', 'KATAL', 'SQUARE_METER', 'CUBIC_METER', 'LITER', 'METER_PER_SECOND', 'METER_PER_SQUARE_SECOND', 'CUBIC_METER_PER_SECOND', 'LITER_PER_SECOND', 'WATT_PER_SQUARE_METER', 'CANDELA_PER_SQUARE_METER', 'BIT', 'BIT_PER_SECOND', 'DEGREES_LATITUDE', 'DEGREES_LONGITUDE', 'PH_VALUE', 'DECIBEL', 'DECIBEL_1W', 'BEL', 'COUNT', 'RATIO_DIV', 'RATIO_MOD', 'PERCENTAGE_RELATIVE_HUMIDITY', 'PERCENTAGE_BATTERY_LEVEL', 'SECONDS_BATTERY_LEVEL', 'EVENT_RATE_SECOND', 'EVENT_RATE_MINUTE', 'HEART_RATE', 'HEART_BEATS', 'SIEMENS_PER_METER', 'LOCATION', 'COLOR_HSB', 'COLOR_RGB', 'GENERIC_COMPLEX_PROPERTY', 'HOME_COLORED_LIGHT', 'HOME_DIMMED_LIGHT', 'HOME_LIGHT', 'HOME_CONTACT_SENSOR', 'HOME_MOTION_SENSOR', 'HOME_SMART_PLUG', 'HOME_TEMPERATURE', 'HOME_TEMPERATURE_C', 'HOME_TEMPERATURE_F', 'HOME_SWITCH', 'HOME_TELEVISION', 'GOOGLE_HOME_COLORED_LIGHT', 'GOOGLE_HOME_DIMMED_LIGHT', 'GOOGLE_HOME_LIGHT', 'GOOGLE_HOME_CONTACT_SENSOR', 'GOOGLE_HOME_MOTION_SENSOR', 'GOOGLE_HOME_SMART_PLUG', 'GOOGLE_HOME_TEMPERATURE', 'GOOGLE_HOME_TEMPERATURE_C', 'GOOGLE_HOME_TEMPERATURE_F', 'GOOGLE_HOME_SWITCH', 'SMART_HOME_COLORED_LIGHT', 'SMART_HOME_DIMMED_LIGHT', 'SMART_HOME_LIGHT', 'SMART_HOME_CONTACT_SENSOR', 'SMART_HOME_MOTION_SENSOR', 'SMART_HOME_SMART_PLUG', 'SMART_HOME_TEMPERATURE', 'SMART_HOME_TEMPERATURE_C', 'SMART_HOME_TEMPERATURE_F', 'SMART_HOME_SWITCH', 'SMART_HOME_TELEVISION', 'ENERGY', 'FORCE', 'TEMPERATURE', 'POWER', 'ELECTRIC_CURRENT', 'ELECTRIC_POTENTIAL', 'ELECTRICAL_RESISTANCE', 'CAPACITANCE', 'TIME', 'FREQUENCY', 'DATA_RATE', 'ACCELERATION', 'AREA', 'LENGTH', 'VELOCITY', 'MASS', 'VOLUME', 'FLOW_RATE', 'ANGLE', 'ILLUMINANCE', 'LUMINOUS_FLUX', 'LUMINANCE', 'LUMINOUS_INTENSITY', 'LOGARITHMIC_QUANTITY', 'PRESSURE', 'INFORMATION_CONTENT', 'SCHEDULE')")
        return value

    @field_validator('update_strategy')
    def update_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ON_CHANGE', 'TIMED']):
            raise ValueError("must be one of enum values ('ON_CHANGE', 'TIMED')")
        return value

    @field_validator('variable_name')
    def variable_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z_][a-zA-Z0-9_]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z_][a-zA-Z0-9_]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "max_value": obj.get("max_value"),
            "min_value": obj.get("min_value"),
            "name": obj.get("name"),
            "permission": obj.get("permission"),
            "persist": obj.get("persist") if obj.get("persist") is not None else True,
            "tag": obj.get("tag"),
            "type": obj.get("type"),
            "update_parameter": obj.get("update_parameter"),
            "update_strategy": obj.get("update_strategy"),
            "variable_name": obj.get("variable_name")
        })
        return _obj


