# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from iot_api_client.models.batch_query_raw_response_series_media_v1 import BatchQueryRawResponseSeriesMediaV1

class ArduinoSeriesRawResponse(BaseModel):
    """
    ArduinoSeriesRawResponse media type (default view)
    """
    count_values: StrictInt = Field(..., description="Total number of values in the array 'values'")
    from_date: datetime = Field(..., description="From date")
    message: Optional[StrictStr] = Field('', description="If the response is different than 'ok'")
    property_id: Optional[StrictStr] = Field(None, description="Property id")
    property_name: Optional[StrictStr] = Field(None, description="Property name")
    property_type: Optional[StrictStr] = Field(None, description="Property type")
    query: StrictStr = Field(..., description="Query of for the data")
    resp_version: StrictInt = Field(..., description="Response version")
    series: BatchQueryRawResponseSeriesMediaV1 = Field(...)
    series_limit: Optional[StrictInt] = Field(None, description="Max of values")
    sort: StrictStr = Field(..., description="Sorting")
    status: StrictStr = Field(..., description="Status of the response")
    thing_id: Optional[StrictStr] = Field(None, description="Thing id")
    times: conlist(datetime) = Field(..., description="Timestamp in RFC3339")
    to_date: datetime = Field(..., description="To date")
    values: conlist(Any) = Field(..., description="Values can be in Float, String, Bool, Object")
    __properties = ["count_values", "from_date", "message", "property_id", "property_name", "property_type", "query", "resp_version", "series", "series_limit", "sort", "status", "thing_id", "times", "to_date", "values"]

    @validator('sort')
    def sort_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ASC', 'DESC'):
            raise ValueError("must be one of enum values ('ASC', 'DESC')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ArduinoSeriesRawResponse:
        """Create an instance of ArduinoSeriesRawResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of series
        if self.series:
            _dict['series'] = self.series.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ArduinoSeriesRawResponse:
        """Create an instance of ArduinoSeriesRawResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArduinoSeriesRawResponse.parse_obj(obj)

        _obj = ArduinoSeriesRawResponse.parse_obj({
            "count_values": obj.get("count_values"),
            "from_date": obj.get("from_date"),
            "message": obj.get("message") if obj.get("message") is not None else '',
            "property_id": obj.get("property_id"),
            "property_name": obj.get("property_name"),
            "property_type": obj.get("property_type"),
            "query": obj.get("query"),
            "resp_version": obj.get("resp_version"),
            "series": BatchQueryRawResponseSeriesMediaV1.from_dict(obj.get("series")) if obj.get("series") is not None else None,
            "series_limit": obj.get("series_limit"),
            "sort": obj.get("sort"),
            "status": obj.get("status"),
            "thing_id": obj.get("thing_id"),
            "times": obj.get("times"),
            "to_date": obj.get("to_date"),
            "values": obj.get("values")
        })
        return _obj


