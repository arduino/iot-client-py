# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Devicev2Otabinaryurl(BaseModel):
    """
    Devicev2Otabinaryurl
    """ # noqa: E501
    var_async: Optional[StrictBool] = Field(default=True, description="If false, wait for the full OTA process, until it gets a result from the device", alias="async")
    binary_key: Annotated[str, Field(strict=True)] = Field(description="The object key of the binary")
    expire_in_mins: Optional[StrictInt] = Field(default=10, description="Binary expire time in minutes, default 10 mins")
    __properties: ClassVar[List[str]] = ["async", "binary_key", "expire_in_mins"]

    @field_validator('binary_key')
    def binary_key_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^ota\/[a-zA-Z0-9_-]+\/[a-zA-Z0-9_-]+.ota$", value):
            raise ValueError(r"must validate the regular expression /^ota\/[a-zA-Z0-9_-]+\/[a-zA-Z0-9_-]+.ota$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Devicev2Otabinaryurl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Devicev2Otabinaryurl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "async": obj.get("async") if obj.get("async") is not None else True,
            "binary_key": obj.get("binary_key"),
            "expire_in_mins": obj.get("expire_in_mins") if obj.get("expire_in_mins") is not None else 10
        })
        return _obj


