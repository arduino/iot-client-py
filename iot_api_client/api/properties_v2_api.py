# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, conint

from typing import List, Optional

from iot_api_client.models.arduino_property import ArduinoProperty
from iot_api_client.models.arduino_timeseriesmedia import ArduinoTimeseriesmedia
from iot_api_client.models.model_property import ModelProperty
from iot_api_client.models.property_value import PropertyValue

from iot_api_client.api_client import ApiClient
from iot_api_client.api_response import ApiResponse
from iot_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PropertiesV2Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def properties_v2_create(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], model_property : Annotated[ModelProperty, Field(..., description="PropertyPayload describes a property of a thing. No field is mandatory")], x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ArduinoProperty:  # noqa: E501
        """create properties_v2  # noqa: E501

        Creates a new property associated to a thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_create(id, model_property, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param model_property: PropertyPayload describes a property of a thing. No field is mandatory (required)
        :type model_property: ModelProperty
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoProperty
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the properties_v2_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.properties_v2_create_with_http_info(id, model_property, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def properties_v2_create_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], model_property : Annotated[ModelProperty, Field(..., description="PropertyPayload describes a property of a thing. No field is mandatory")], x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """create properties_v2  # noqa: E501

        Creates a new property associated to a thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_create_with_http_info(id, model_property, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param model_property: PropertyPayload describes a property of a thing. No field is mandatory (required)
        :type model_property: ModelProperty
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoProperty, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'model_property',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_v2_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['model_property'] is not None:
            _body_params = _params['model_property']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '201': "ArduinoProperty",
            '400': "Error",
            '401': "Error",
            '404': None,
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}/properties', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def properties_v2_delete(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], pid : Annotated[StrictStr, Field(..., description="The id of the property")], force : Annotated[Optional[StrictBool], Field(description="If true, hard delete the property")] = None, x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> None:  # noqa: E501
        """delete properties_v2  # noqa: E501

        Removes a property associated to a thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_delete(id, pid, force, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param pid: The id of the property (required)
        :type pid: str
        :param force: If true, hard delete the property
        :type force: bool
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the properties_v2_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.properties_v2_delete_with_http_info(id, pid, force, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def properties_v2_delete_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], pid : Annotated[StrictStr, Field(..., description="The id of the property")], force : Annotated[Optional[StrictBool], Field(description="If true, hard delete the property")] = None, x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """delete properties_v2  # noqa: E501

        Removes a property associated to a thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_delete_with_http_info(id, pid, force, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param pid: The id of the property (required)
        :type pid: str
        :param force: If true, hard delete the property
        :type force: bool
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'pid',
            'force',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_v2_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['pid']:
            _path_params['pid'] = _params['pid']


        # process the query parameters
        _query_params = []
        if _params.get('force') is not None:  # noqa: E501
            _query_params.append(('force', _params['force']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error+json', 'text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v2/things/{id}/properties/{pid}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def properties_v2_list(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], show_deleted : Annotated[Optional[StrictBool], Field(description="If true, shows the soft deleted properties")] = None, x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> List[ArduinoProperty]:  # noqa: E501
        """list properties_v2  # noqa: E501

        Returns the list of properties associated to the thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_list(id, show_deleted, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param show_deleted: If true, shows the soft deleted properties
        :type show_deleted: bool
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ArduinoProperty]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the properties_v2_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.properties_v2_list_with_http_info(id, show_deleted, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def properties_v2_list_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], show_deleted : Annotated[Optional[StrictBool], Field(description="If true, shows the soft deleted properties")] = None, x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """list properties_v2  # noqa: E501

        Returns the list of properties associated to the thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_list_with_http_info(id, show_deleted, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param show_deleted: If true, shows the soft deleted properties
        :type show_deleted: bool
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ArduinoProperty], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'show_deleted',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_v2_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('show_deleted') is not None:  # noqa: E501
            _query_params.append(('show_deleted', _params['show_deleted']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.property+json; type=collection', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "List[ArduinoProperty]",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}/properties', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def properties_v2_publish(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], pid : Annotated[StrictStr, Field(..., description="The id of the property")], property_value : Annotated[PropertyValue, Field(..., description="PropertyValuePayload describes a property value")], x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> None:  # noqa: E501
        """publish properties_v2  # noqa: E501

        Publish a property value to MQTT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_publish(id, pid, property_value, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param pid: The id of the property (required)
        :type pid: str
        :param property_value: PropertyValuePayload describes a property value (required)
        :type property_value: PropertyValue
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the properties_v2_publish_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.properties_v2_publish_with_http_info(id, pid, property_value, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def properties_v2_publish_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], pid : Annotated[StrictStr, Field(..., description="The id of the property")], property_value : Annotated[PropertyValue, Field(..., description="PropertyValuePayload describes a property value")], x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """publish properties_v2  # noqa: E501

        Publish a property value to MQTT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_publish_with_http_info(id, pid, property_value, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param pid: The id of the property (required)
        :type pid: str
        :param property_value: PropertyValuePayload describes a property value (required)
        :type property_value: PropertyValue
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'pid',
            'property_value',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_v2_publish" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['pid']:
            _path_params['pid'] = _params['pid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['property_value'] is not None:
            _body_params = _params['property_value']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error+json', 'text/plain'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v2/things/{id}/properties/{pid}/publish', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def properties_v2_show(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], pid : Annotated[StrictStr, Field(..., description="The id of the property")], show_deleted : Annotated[Optional[StrictBool], Field(description="If true, shows the soft deleted properties")] = None, x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ArduinoProperty:  # noqa: E501
        """show properties_v2  # noqa: E501

        Returns the property requested by the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_show(id, pid, show_deleted, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param pid: The id of the property (required)
        :type pid: str
        :param show_deleted: If true, shows the soft deleted properties
        :type show_deleted: bool
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoProperty
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the properties_v2_show_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.properties_v2_show_with_http_info(id, pid, show_deleted, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def properties_v2_show_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], pid : Annotated[StrictStr, Field(..., description="The id of the property")], show_deleted : Annotated[Optional[StrictBool], Field(description="If true, shows the soft deleted properties")] = None, x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """show properties_v2  # noqa: E501

        Returns the property requested by the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_show_with_http_info(id, pid, show_deleted, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param pid: The id of the property (required)
        :type pid: str
        :param show_deleted: If true, shows the soft deleted properties
        :type show_deleted: bool
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoProperty, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'pid',
            'show_deleted',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_v2_show" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['pid']:
            _path_params['pid'] = _params['pid']


        # process the query parameters
        _query_params = []
        if _params.get('show_deleted') is not None:  # noqa: E501
            _query_params.append(('show_deleted', _params['show_deleted']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoProperty",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}/properties/{pid}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def properties_v2_timeseries(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], pid : Annotated[StrictStr, Field(..., description="ID of a numerical property")], aggregation : Annotated[Optional[StrictStr], Field(description="Samples aggregation statistic. Supported aggregations AVG|MAX|MIN|COUNT|SUM|PCT_99|PCT_95|PCT_90|PCT_75|PCT_50|PCT_15|PCT_5")] = None, desc : Annotated[Optional[StrictBool], Field(description="Whether data's ordering (by time) should be descending")] = None, var_from : Annotated[Optional[StrictStr], Field(description="Get data with a timestamp >= to this date (default: 2 weeks ago, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)")] = None, interval : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Binning interval in seconds (defaut: the smallest possible value compatibly with the limit of 1000 data points in the response)")] = None, to : Annotated[Optional[StrictStr], Field(description="Get data with a timestamp < to this date (default: now, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)")] = None, x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ArduinoTimeseriesmedia:  # noqa: E501
        """timeseries properties_v2  # noqa: E501

        Get numerical property's historic data binned on a specified time interval (note: the total number of data points should NOT be greater than 1000 otherwise the result will be truncated)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_timeseries(id, pid, aggregation, desc, var_from, interval, to, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param pid: ID of a numerical property (required)
        :type pid: str
        :param aggregation: Samples aggregation statistic. Supported aggregations AVG|MAX|MIN|COUNT|SUM|PCT_99|PCT_95|PCT_90|PCT_75|PCT_50|PCT_15|PCT_5
        :type aggregation: str
        :param desc: Whether data's ordering (by time) should be descending
        :type desc: bool
        :param var_from: Get data with a timestamp >= to this date (default: 2 weeks ago, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
        :type var_from: str
        :param interval: Binning interval in seconds (defaut: the smallest possible value compatibly with the limit of 1000 data points in the response)
        :type interval: int
        :param to: Get data with a timestamp < to this date (default: now, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
        :type to: str
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoTimeseriesmedia
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the properties_v2_timeseries_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.properties_v2_timeseries_with_http_info(id, pid, aggregation, desc, var_from, interval, to, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def properties_v2_timeseries_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], pid : Annotated[StrictStr, Field(..., description="ID of a numerical property")], aggregation : Annotated[Optional[StrictStr], Field(description="Samples aggregation statistic. Supported aggregations AVG|MAX|MIN|COUNT|SUM|PCT_99|PCT_95|PCT_90|PCT_75|PCT_50|PCT_15|PCT_5")] = None, desc : Annotated[Optional[StrictBool], Field(description="Whether data's ordering (by time) should be descending")] = None, var_from : Annotated[Optional[StrictStr], Field(description="Get data with a timestamp >= to this date (default: 2 weeks ago, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)")] = None, interval : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Binning interval in seconds (defaut: the smallest possible value compatibly with the limit of 1000 data points in the response)")] = None, to : Annotated[Optional[StrictStr], Field(description="Get data with a timestamp < to this date (default: now, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)")] = None, x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """timeseries properties_v2  # noqa: E501

        Get numerical property's historic data binned on a specified time interval (note: the total number of data points should NOT be greater than 1000 otherwise the result will be truncated)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_timeseries_with_http_info(id, pid, aggregation, desc, var_from, interval, to, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param pid: ID of a numerical property (required)
        :type pid: str
        :param aggregation: Samples aggregation statistic. Supported aggregations AVG|MAX|MIN|COUNT|SUM|PCT_99|PCT_95|PCT_90|PCT_75|PCT_50|PCT_15|PCT_5
        :type aggregation: str
        :param desc: Whether data's ordering (by time) should be descending
        :type desc: bool
        :param var_from: Get data with a timestamp >= to this date (default: 2 weeks ago, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
        :type var_from: str
        :param interval: Binning interval in seconds (defaut: the smallest possible value compatibly with the limit of 1000 data points in the response)
        :type interval: int
        :param to: Get data with a timestamp < to this date (default: now, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
        :type to: str
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoTimeseriesmedia, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'pid',
            'aggregation',
            'desc',
            'var_from',
            'interval',
            'to',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_v2_timeseries" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['pid']:
            _path_params['pid'] = _params['pid']


        # process the query parameters
        _query_params = []
        if _params.get('aggregation') is not None:  # noqa: E501
            _query_params.append(('aggregation', _params['aggregation']))

        if _params.get('desc') is not None:  # noqa: E501
            _query_params.append(('desc', _params['desc']))

        if _params.get('var_from') is not None:  # noqa: E501
            _query_params.append(('from', _params['var_from']))

        if _params.get('interval') is not None:  # noqa: E501
            _query_params.append(('interval', _params['interval']))

        if _params.get('to') is not None:  # noqa: E501
            _query_params.append(('to', _params['to']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.timeseriesmedia+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoTimeseriesmedia",
            '400': "Error",
            '401': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}/properties/{pid}/timeseries', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def properties_v2_update(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], pid : Annotated[StrictStr, Field(..., description="The id of the property")], model_property : Annotated[ModelProperty, Field(..., description="PropertyPayload describes a property of a thing. No field is mandatory")], x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ArduinoProperty:  # noqa: E501
        """update properties_v2  # noqa: E501

        Updates a property associated to a thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_update(id, pid, model_property, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param pid: The id of the property (required)
        :type pid: str
        :param model_property: PropertyPayload describes a property of a thing. No field is mandatory (required)
        :type model_property: ModelProperty
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoProperty
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the properties_v2_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.properties_v2_update_with_http_info(id, pid, model_property, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def properties_v2_update_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], pid : Annotated[StrictStr, Field(..., description="The id of the property")], model_property : Annotated[ModelProperty, Field(..., description="PropertyPayload describes a property of a thing. No field is mandatory")], x_organization : Annotated[Optional[StrictStr], Field(description="The id of the organization")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """update properties_v2  # noqa: E501

        Updates a property associated to a thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.properties_v2_update_with_http_info(id, pid, model_property, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param pid: The id of the property (required)
        :type pid: str
        :param model_property: PropertyPayload describes a property of a thing. No field is mandatory (required)
        :type model_property: ModelProperty
        :param x_organization: The id of the organization
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoProperty, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'pid',
            'model_property',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_v2_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['pid']:
            _path_params['pid'] = _params['pid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['model_property'] is not None:
            _body_params = _params['model_property']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoProperty",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}/properties/{pid}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
