# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import StrictStr

from typing import Optional

from iot_api_client.models.arduino_loradevicev1 import ArduinoLoradevicev1
from iot_api_client.models.create_lora_devices_v1_payload import CreateLoraDevicesV1Payload

from iot_api_client.api_client import ApiClient
from iot_api_client.api_response import ApiResponse
from iot_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class LoraDevicesV1Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def lora_devices_v1_create(self, create_lora_devices_v1_payload : CreateLoraDevicesV1Payload, x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoLoradevicev1:  # noqa: E501
        """create lora_devices_v1  # noqa: E501

        Create a new lora device. Its info are saved on our database, and on the lora provider network. Creates a device_v2 automatically  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lora_devices_v1_create(create_lora_devices_v1_payload, x_organization, async_req=True)
        >>> result = thread.get()

        :param create_lora_devices_v1_payload: (required)
        :type create_lora_devices_v1_payload: CreateLoraDevicesV1Payload
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoLoradevicev1
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the lora_devices_v1_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.lora_devices_v1_create_with_http_info(create_lora_devices_v1_payload, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def lora_devices_v1_create_with_http_info(self, create_lora_devices_v1_payload : CreateLoraDevicesV1Payload, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """create lora_devices_v1  # noqa: E501

        Create a new lora device. Its info are saved on our database, and on the lora provider network. Creates a device_v2 automatically  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lora_devices_v1_create_with_http_info(create_lora_devices_v1_payload, x_organization, async_req=True)
        >>> result = thread.get()

        :param create_lora_devices_v1_payload: (required)
        :type create_lora_devices_v1_payload: CreateLoraDevicesV1Payload
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoLoradevicev1, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_lora_devices_v1_payload',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lora_devices_v1_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_lora_devices_v1_payload'] is not None:
            _body_params = _params['create_lora_devices_v1_payload']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.loradevicev1+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '201': "ArduinoLoradevicev1",
        }

        return self.api_client.call_api(
            '/v1/lora-devices/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
