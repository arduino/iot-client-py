# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, conlist, constr, validator

from typing import List, Optional

from iot_api_client.models.arduino_thing import ArduinoThing
from iot_api_client.models.arduino_thingtemplate import ArduinoThingtemplate
from iot_api_client.models.thing_clone import ThingClone
from iot_api_client.models.thing_create import ThingCreate
from iot_api_client.models.thing_sketch import ThingSketch
from iot_api_client.models.thing_update import ThingUpdate
from iot_api_client.models.update_sketch import UpdateSketch

from iot_api_client.api_client import ApiClient
from iot_api_client.api_response import ApiResponse
from iot_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ThingsV2Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def things_v2_clone(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], thing_clone : Annotated[ThingClone, Field(..., description="Payload to clone a new thing from an existing one")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoThing:  # noqa: E501
        """clone things_v2  # noqa: E501

        Clone a given thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_clone(id, thing_clone, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param thing_clone: Payload to clone a new thing from an existing one (required)
        :type thing_clone: ThingClone
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoThing
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the things_v2_clone_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.things_v2_clone_with_http_info(id, thing_clone, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def things_v2_clone_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], thing_clone : Annotated[ThingClone, Field(..., description="Payload to clone a new thing from an existing one")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """clone things_v2  # noqa: E501

        Clone a given thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_clone_with_http_info(id, thing_clone, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param thing_clone: Payload to clone a new thing from an existing one (required)
        :type thing_clone: ThingClone
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoThing, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'thing_clone',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method things_v2_clone" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['thing_clone'] is not None:
            _body_params = _params['thing_clone']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '201': "ArduinoThing",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}/clone', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def things_v2_create(self, thing_create : Annotated[ThingCreate, Field(..., description="Payload to create a new thing")], force : Annotated[Optional[StrictBool], Field(description="If true, detach device from the other thing, and attach to this thing")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoThing:  # noqa: E501
        """create things_v2  # noqa: E501

        Creates a new thing associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_create(thing_create, force, x_organization, async_req=True)
        >>> result = thread.get()

        :param thing_create: Payload to create a new thing (required)
        :type thing_create: ThingCreate
        :param force: If true, detach device from the other thing, and attach to this thing
        :type force: bool
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoThing
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the things_v2_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.things_v2_create_with_http_info(thing_create, force, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def things_v2_create_with_http_info(self, thing_create : Annotated[ThingCreate, Field(..., description="Payload to create a new thing")], force : Annotated[Optional[StrictBool], Field(description="If true, detach device from the other thing, and attach to this thing")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """create things_v2  # noqa: E501

        Creates a new thing associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_create_with_http_info(thing_create, force, x_organization, async_req=True)
        >>> result = thread.get()

        :param thing_create: Payload to create a new thing (required)
        :type thing_create: ThingCreate
        :param force: If true, detach device from the other thing, and attach to this thing
        :type force: bool
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoThing, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'thing_create',
            'force',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method things_v2_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('force') is not None:  # noqa: E501
            _query_params.append(('force', _params['force']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['thing_create'] is not None:
            _body_params = _params['thing_create']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '201': "ArduinoThing",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '409': "Error",
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def things_v2_create_sketch(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], thing_sketch : Annotated[ThingSketch, Field(..., description="ThingSketchPayload describes a sketch of a thing")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoThing:  # noqa: E501
        """createSketch things_v2  # noqa: E501

        Creates a new sketch thing associated to the thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_create_sketch(id, thing_sketch, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param thing_sketch: ThingSketchPayload describes a sketch of a thing (required)
        :type thing_sketch: ThingSketch
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoThing
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the things_v2_create_sketch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.things_v2_create_sketch_with_http_info(id, thing_sketch, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def things_v2_create_sketch_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], thing_sketch : Annotated[ThingSketch, Field(..., description="ThingSketchPayload describes a sketch of a thing")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """createSketch things_v2  # noqa: E501

        Creates a new sketch thing associated to the thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_create_sketch_with_http_info(id, thing_sketch, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param thing_sketch: ThingSketchPayload describes a sketch of a thing (required)
        :type thing_sketch: ThingSketch
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoThing, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'thing_sketch',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method things_v2_create_sketch" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['thing_sketch'] is not None:
            _body_params = _params['thing_sketch']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '201': "ArduinoThing",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}/sketch', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def things_v2_delete(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], force : Annotated[Optional[StrictBool], Field(description="If true, hard delete the thing")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> None:  # noqa: E501
        """delete things_v2  # noqa: E501

        Removes a thing associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_delete(id, force, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param force: If true, hard delete the thing
        :type force: bool
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the things_v2_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.things_v2_delete_with_http_info(id, force, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def things_v2_delete_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], force : Annotated[Optional[StrictBool], Field(description="If true, hard delete the thing")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """delete things_v2  # noqa: E501

        Removes a thing associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_delete_with_http_info(id, force, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param force: If true, hard delete the thing
        :type force: bool
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'force',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method things_v2_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('force') is not None:  # noqa: E501
            _query_params.append(('force', _params['force']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error+json', 'text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v2/things/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def things_v2_delete_sketch(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoThing:  # noqa: E501
        """deleteSketch things_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_delete_sketch(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoThing
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the things_v2_delete_sketch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.things_v2_delete_sketch_with_http_info(id, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def things_v2_delete_sketch_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """deleteSketch things_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_delete_sketch_with_http_info(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoThing, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method things_v2_delete_sketch" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoThing",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}/sketch', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def things_v2_list(self, across_user_ids : Annotated[Optional[StrictBool], Field(description="If true, returns all the things")] = None, device_id : Annotated[Optional[StrictStr], Field(description="The id of the device you want to filter")] = None, ids : Annotated[Optional[conlist(StrictStr)], Field(description="Filter only the desired things")] = None, show_deleted : Annotated[Optional[StrictBool], Field(description="If true, shows the soft deleted things")] = None, show_properties : Annotated[Optional[StrictBool], Field(description="If true, returns things with their properties, and last values")] = None, tags : Annotated[Optional[conlist(constr(strict=True, max_length=129))], Field(description="Filter by tags")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> List[ArduinoThing]:  # noqa: E501
        """list things_v2  # noqa: E501

        Returns the list of things associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_list(across_user_ids, device_id, ids, show_deleted, show_properties, tags, x_organization, async_req=True)
        >>> result = thread.get()

        :param across_user_ids: If true, returns all the things
        :type across_user_ids: bool
        :param device_id: The id of the device you want to filter
        :type device_id: str
        :param ids: Filter only the desired things
        :type ids: List[str]
        :param show_deleted: If true, shows the soft deleted things
        :type show_deleted: bool
        :param show_properties: If true, returns things with their properties, and last values
        :type show_properties: bool
        :param tags: Filter by tags
        :type tags: List[str]
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ArduinoThing]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the things_v2_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.things_v2_list_with_http_info(across_user_ids, device_id, ids, show_deleted, show_properties, tags, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def things_v2_list_with_http_info(self, across_user_ids : Annotated[Optional[StrictBool], Field(description="If true, returns all the things")] = None, device_id : Annotated[Optional[StrictStr], Field(description="The id of the device you want to filter")] = None, ids : Annotated[Optional[conlist(StrictStr)], Field(description="Filter only the desired things")] = None, show_deleted : Annotated[Optional[StrictBool], Field(description="If true, shows the soft deleted things")] = None, show_properties : Annotated[Optional[StrictBool], Field(description="If true, returns things with their properties, and last values")] = None, tags : Annotated[Optional[conlist(constr(strict=True, max_length=129))], Field(description="Filter by tags")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """list things_v2  # noqa: E501

        Returns the list of things associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_list_with_http_info(across_user_ids, device_id, ids, show_deleted, show_properties, tags, x_organization, async_req=True)
        >>> result = thread.get()

        :param across_user_ids: If true, returns all the things
        :type across_user_ids: bool
        :param device_id: The id of the device you want to filter
        :type device_id: str
        :param ids: Filter only the desired things
        :type ids: List[str]
        :param show_deleted: If true, shows the soft deleted things
        :type show_deleted: bool
        :param show_properties: If true, returns things with their properties, and last values
        :type show_properties: bool
        :param tags: Filter by tags
        :type tags: List[str]
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ArduinoThing], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'across_user_ids',
            'device_id',
            'ids',
            'show_deleted',
            'show_properties',
            'tags',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method things_v2_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('across_user_ids') is not None:  # noqa: E501
            _query_params.append(('across_user_ids', _params['across_user_ids']))

        if _params.get('device_id') is not None:  # noqa: E501
            _query_params.append(('device_id', _params['device_id']))

        if _params.get('ids') is not None:  # noqa: E501
            _query_params.append(('ids', _params['ids']))
            _collection_formats['ids'] = 'multi'

        if _params.get('show_deleted') is not None:  # noqa: E501
            _query_params.append(('show_deleted', _params['show_deleted']))

        if _params.get('show_properties') is not None:  # noqa: E501
            _query_params.append(('show_properties', _params['show_properties']))

        if _params.get('tags') is not None:  # noqa: E501
            _query_params.append(('tags', _params['tags']))
            _collection_formats['tags'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.thing+json; type=collection', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "List[ArduinoThing]",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def things_v2_show(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], show_deleted : Annotated[Optional[StrictBool], Field(description="If true, shows the soft deleted thing")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoThing:  # noqa: E501
        """show things_v2  # noqa: E501

        Returns the thing requested by the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_show(id, show_deleted, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param show_deleted: If true, shows the soft deleted thing
        :type show_deleted: bool
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoThing
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the things_v2_show_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.things_v2_show_with_http_info(id, show_deleted, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def things_v2_show_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], show_deleted : Annotated[Optional[StrictBool], Field(description="If true, shows the soft deleted thing")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """show things_v2  # noqa: E501

        Returns the thing requested by the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_show_with_http_info(id, show_deleted, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param show_deleted: If true, shows the soft deleted thing
        :type show_deleted: bool
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoThing, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'show_deleted',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method things_v2_show" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('show_deleted') is not None:  # noqa: E501
            _query_params.append(('show_deleted', _params['show_deleted']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoThing",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def things_v2_template(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoThingtemplate:  # noqa: E501
        """template things_v2  # noqa: E501

        Extract template from the given thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_template(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoThingtemplate
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the things_v2_template_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.things_v2_template_with_http_info(id, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def things_v2_template_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """template things_v2  # noqa: E501

        Extract template from the given thing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_template_with_http_info(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoThingtemplate, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method things_v2_template" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.thingtemplate+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoThingtemplate",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}/template', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def things_v2_update(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], thing_update : Annotated[ThingUpdate, Field(..., description="Payload to update an existing thing")], force : Annotated[Optional[StrictBool], Field(description="If true, detach device from the other thing, and attach to this thing")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoThing:  # noqa: E501
        """update things_v2  # noqa: E501

        Updates a thing associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_update(id, thing_update, force, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param thing_update: Payload to update an existing thing (required)
        :type thing_update: ThingUpdate
        :param force: If true, detach device from the other thing, and attach to this thing
        :type force: bool
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoThing
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the things_v2_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.things_v2_update_with_http_info(id, thing_update, force, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def things_v2_update_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], thing_update : Annotated[ThingUpdate, Field(..., description="Payload to update an existing thing")], force : Annotated[Optional[StrictBool], Field(description="If true, detach device from the other thing, and attach to this thing")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """update things_v2  # noqa: E501

        Updates a thing associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_update_with_http_info(id, thing_update, force, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param thing_update: Payload to update an existing thing (required)
        :type thing_update: ThingUpdate
        :param force: If true, detach device from the other thing, and attach to this thing
        :type force: bool
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoThing, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'thing_update',
            'force',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method things_v2_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('force') is not None:  # noqa: E501
            _query_params.append(('force', _params['force']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['thing_update'] is not None:
            _body_params = _params['thing_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoThing",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '409': "Error",
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def things_v2_update_sketch(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], sketch_id : Annotated[StrictStr, Field(..., description="The id of the sketch")], x_organization : Optional[StrictStr] = None, update_sketch : Optional[UpdateSketch] = None, **kwargs) -> ArduinoThing:  # noqa: E501
        """updateSketch things_v2  # noqa: E501

        Update an existing thing sketch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_update_sketch(id, sketch_id, x_organization, update_sketch, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param sketch_id: The id of the sketch (required)
        :type sketch_id: str
        :param x_organization:
        :type x_organization: str
        :param update_sketch:
        :type update_sketch: UpdateSketch
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoThing
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the things_v2_update_sketch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.things_v2_update_sketch_with_http_info(id, sketch_id, x_organization, update_sketch, **kwargs)  # noqa: E501

    @validate_arguments
    def things_v2_update_sketch_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the thing")], sketch_id : Annotated[StrictStr, Field(..., description="The id of the sketch")], x_organization : Optional[StrictStr] = None, update_sketch : Optional[UpdateSketch] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """updateSketch things_v2  # noqa: E501

        Update an existing thing sketch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.things_v2_update_sketch_with_http_info(id, sketch_id, x_organization, update_sketch, async_req=True)
        >>> result = thread.get()

        :param id: The id of the thing (required)
        :type id: str
        :param sketch_id: The id of the sketch (required)
        :type sketch_id: str
        :param x_organization:
        :type x_organization: str
        :param update_sketch:
        :type update_sketch: UpdateSketch
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoThing, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'sketch_id',
            'x_organization',
            'update_sketch'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method things_v2_update_sketch" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['sketch_id']:
            _path_params['sketchId'] = _params['sketch_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_sketch'] is not None:
            _body_params = _params['update_sketch']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoThing",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/things/{id}/sketch/{sketchId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
