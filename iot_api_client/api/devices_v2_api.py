# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist, constr, validator

from typing import List, Optional

from iot_api_client.models.arduino_devicev2 import ArduinoDevicev2
from iot_api_client.models.arduino_devicev2_event_properties import ArduinoDevicev2EventProperties
from iot_api_client.models.arduino_devicev2_status_events import ArduinoDevicev2StatusEvents
from iot_api_client.models.arduino_devicev2properties import ArduinoDevicev2properties
from iot_api_client.models.arduino_devicev2propertyvalues import ArduinoDevicev2propertyvalues
from iot_api_client.models.create_devices_v2_payload import CreateDevicesV2Payload
from iot_api_client.models.devicev2 import Devicev2
from iot_api_client.models.properties_values import PropertiesValues

from iot_api_client.api_client import ApiClient
from iot_api_client.api_response import ApiResponse
from iot_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DevicesV2Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def devices_v2_create(self, create_devices_v2_payload : Annotated[CreateDevicesV2Payload, Field(..., description="DeviceV2 describes a device.")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDevicev2:  # noqa: E501
        """create devices_v2  # noqa: E501

        Creates a new device associated to the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_create(create_devices_v2_payload, x_organization, async_req=True)
        >>> result = thread.get()

        :param create_devices_v2_payload: DeviceV2 describes a device. (required)
        :type create_devices_v2_payload: CreateDevicesV2Payload
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDevicev2
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the devices_v2_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.devices_v2_create_with_http_info(create_devices_v2_payload, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_v2_create_with_http_info(self, create_devices_v2_payload : Annotated[CreateDevicesV2Payload, Field(..., description="DeviceV2 describes a device.")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """create devices_v2  # noqa: E501

        Creates a new device associated to the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_create_with_http_info(create_devices_v2_payload, x_organization, async_req=True)
        >>> result = thread.get()

        :param create_devices_v2_payload: DeviceV2 describes a device. (required)
        :type create_devices_v2_payload: CreateDevicesV2Payload
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDevicev2, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_devices_v2_payload',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_devices_v2_payload'] is not None:
            _body_params = _params['create_devices_v2_payload']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.devicev2+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '201': "ArduinoDevicev2",
            '401': "Error",
            '403': "Error",
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/devices', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_v2_delete(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], x_organization : Optional[StrictStr] = None, **kwargs) -> None:  # noqa: E501
        """delete devices_v2  # noqa: E501

        Removes a device associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_delete(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the devices_v2_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.devices_v2_delete_with_http_info(id, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_v2_delete_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """delete devices_v2  # noqa: E501

        Removes a device associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_delete_with_http_info(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error+json', 'text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v2/devices/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_v2_get_events(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], limit : Annotated[Optional[StrictInt], Field(description="The number of events to select")] = None, start : Annotated[Optional[StrictStr], Field(description="The time at which to start selecting events")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDevicev2EventProperties:  # noqa: E501
        """getEvents devices_v2  # noqa: E501

        GET device events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_get_events(id, limit, start, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param limit: The number of events to select
        :type limit: int
        :param start: The time at which to start selecting events
        :type start: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDevicev2EventProperties
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the devices_v2_get_events_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.devices_v2_get_events_with_http_info(id, limit, start, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_v2_get_events_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], limit : Annotated[Optional[StrictInt], Field(description="The number of events to select")] = None, start : Annotated[Optional[StrictStr], Field(description="The time at which to start selecting events")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """getEvents devices_v2  # noqa: E501

        GET device events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_get_events_with_http_info(id, limit, start, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param limit: The number of events to select
        :type limit: int
        :param start: The time at which to start selecting events
        :type start: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDevicev2EventProperties, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'limit',
            'start',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_get_events" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('start') is not None:  # noqa: E501
            _query_params.append(('start', _params['start']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.devicev2.event.properties+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoDevicev2EventProperties",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/v2/devices/{id}/events', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_v2_get_properties(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], show_deleted : Annotated[Optional[StrictBool], Field(description="If true, shows the soft deleted properties")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDevicev2properties:  # noqa: E501
        """getProperties devices_v2  # noqa: E501

        GET device properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_get_properties(id, show_deleted, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param show_deleted: If true, shows the soft deleted properties
        :type show_deleted: bool
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDevicev2properties
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the devices_v2_get_properties_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.devices_v2_get_properties_with_http_info(id, show_deleted, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_v2_get_properties_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], show_deleted : Annotated[Optional[StrictBool], Field(description="If true, shows the soft deleted properties")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """getProperties devices_v2  # noqa: E501

        GET device properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_get_properties_with_http_info(id, show_deleted, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param show_deleted: If true, shows the soft deleted properties
        :type show_deleted: bool
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDevicev2properties, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'show_deleted',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_get_properties" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('show_deleted') is not None:  # noqa: E501
            _query_params.append(('show_deleted', _params['show_deleted']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.devicev2properties+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoDevicev2properties",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/devices/{id}/properties', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_v2_get_status_events(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], limit : Annotated[Optional[StrictInt], Field(description="The number of events to select")] = None, start : Annotated[Optional[StrictStr], Field(description="The time at which to start selecting events")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDevicev2StatusEvents:  # noqa: E501
        """GetStatusEvents devices_v2  # noqa: E501

        GET connection status events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_get_status_events(id, limit, start, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param limit: The number of events to select
        :type limit: int
        :param start: The time at which to start selecting events
        :type start: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDevicev2StatusEvents
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the devices_v2_get_status_events_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.devices_v2_get_status_events_with_http_info(id, limit, start, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_v2_get_status_events_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], limit : Annotated[Optional[StrictInt], Field(description="The number of events to select")] = None, start : Annotated[Optional[StrictStr], Field(description="The time at which to start selecting events")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """GetStatusEvents devices_v2  # noqa: E501

        GET connection status events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_get_status_events_with_http_info(id, limit, start, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param limit: The number of events to select
        :type limit: int
        :param start: The time at which to start selecting events
        :type start: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDevicev2StatusEvents, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'limit',
            'start',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_get_status_events" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('start') is not None:  # noqa: E501
            _query_params.append(('start', _params['start']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.devicev2.status.events+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoDevicev2StatusEvents",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/v2/devices/{id}/status', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_v2_list(self, across_user_ids : Annotated[Optional[StrictBool], Field(description="If true, returns all the devices")] = None, serial : Annotated[Optional[StrictStr], Field(description="Filter by device serial number")] = None, tags : Annotated[Optional[conlist(constr(strict=True, max_length=129))], Field(description="Filter by tags")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> List[ArduinoDevicev2]:  # noqa: E501
        """list devices_v2  # noqa: E501

        Returns the list of devices associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_list(across_user_ids, serial, tags, x_organization, async_req=True)
        >>> result = thread.get()

        :param across_user_ids: If true, returns all the devices
        :type across_user_ids: bool
        :param serial: Filter by device serial number
        :type serial: str
        :param tags: Filter by tags
        :type tags: List[str]
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ArduinoDevicev2]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the devices_v2_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.devices_v2_list_with_http_info(across_user_ids, serial, tags, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_v2_list_with_http_info(self, across_user_ids : Annotated[Optional[StrictBool], Field(description="If true, returns all the devices")] = None, serial : Annotated[Optional[StrictStr], Field(description="Filter by device serial number")] = None, tags : Annotated[Optional[conlist(constr(strict=True, max_length=129))], Field(description="Filter by tags")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """list devices_v2  # noqa: E501

        Returns the list of devices associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_list_with_http_info(across_user_ids, serial, tags, x_organization, async_req=True)
        >>> result = thread.get()

        :param across_user_ids: If true, returns all the devices
        :type across_user_ids: bool
        :param serial: Filter by device serial number
        :type serial: str
        :param tags: Filter by tags
        :type tags: List[str]
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ArduinoDevicev2], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'across_user_ids',
            'serial',
            'tags',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('across_user_ids') is not None:  # noqa: E501
            _query_params.append(('across_user_ids', _params['across_user_ids']))

        if _params.get('serial') is not None:  # noqa: E501
            _query_params.append(('serial', _params['serial']))

        if _params.get('tags') is not None:  # noqa: E501
            _query_params.append(('tags', _params['tags']))
            _collection_formats['tags'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.devicev2+json; type=collection', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "List[ArduinoDevicev2]",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/devices', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_v2_show(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDevicev2:  # noqa: E501
        """show devices_v2  # noqa: E501

        Returns the device requested by the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_show(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDevicev2
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the devices_v2_show_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.devices_v2_show_with_http_info(id, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_v2_show_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """show devices_v2  # noqa: E501

        Returns the device requested by the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_show_with_http_info(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDevicev2, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_show" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.devicev2+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoDevicev2",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/devices/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_v2_timeseries(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], pid : Annotated[StrictStr, Field(..., description="The id of the property")], limit : Annotated[Optional[StrictInt], Field(description="The number of properties to select")] = None, start : Annotated[Optional[StrictStr], Field(description="The time at which to start selecting properties")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDevicev2propertyvalues:  # noqa: E501
        """timeseries devices_v2  # noqa: E501

        GET device properties values in a range of time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_timeseries(id, pid, limit, start, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param pid: The id of the property (required)
        :type pid: str
        :param limit: The number of properties to select
        :type limit: int
        :param start: The time at which to start selecting properties
        :type start: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDevicev2propertyvalues
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the devices_v2_timeseries_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.devices_v2_timeseries_with_http_info(id, pid, limit, start, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_v2_timeseries_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], pid : Annotated[StrictStr, Field(..., description="The id of the property")], limit : Annotated[Optional[StrictInt], Field(description="The number of properties to select")] = None, start : Annotated[Optional[StrictStr], Field(description="The time at which to start selecting properties")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """timeseries devices_v2  # noqa: E501

        GET device properties values in a range of time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_timeseries_with_http_info(id, pid, limit, start, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param pid: The id of the property (required)
        :type pid: str
        :param limit: The number of properties to select
        :type limit: int
        :param start: The time at which to start selecting properties
        :type start: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDevicev2propertyvalues, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'pid',
            'limit',
            'start',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_timeseries" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['pid']:
            _path_params['pid'] = _params['pid']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('start') is not None:  # noqa: E501
            _query_params.append(('start', _params['start']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.devicev2propertyvalues+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoDevicev2propertyvalues",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/devices/{id}/properties/{pid}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_v2_update(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], devicev2 : Annotated[Devicev2, Field(..., description="DeviceV2 describes a device.")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDevicev2:  # noqa: E501
        """update devices_v2  # noqa: E501

        Updates a device associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_update(id, devicev2, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param devicev2: DeviceV2 describes a device. (required)
        :type devicev2: Devicev2
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDevicev2
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the devices_v2_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.devices_v2_update_with_http_info(id, devicev2, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_v2_update_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], devicev2 : Annotated[Devicev2, Field(..., description="DeviceV2 describes a device.")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """update devices_v2  # noqa: E501

        Updates a device associated to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_update_with_http_info(id, devicev2, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param devicev2: DeviceV2 describes a device. (required)
        :type devicev2: Devicev2
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDevicev2, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'devicev2',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['devicev2'] is not None:
            _body_params = _params['devicev2']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.devicev2+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoDevicev2",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/devices/{id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_v2_update_properties(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], properties_values : PropertiesValues, x_organization : Optional[StrictStr] = None, **kwargs) -> None:  # noqa: E501
        """updateProperties devices_v2  # noqa: E501

        Update device properties last values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_update_properties(id, properties_values, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param properties_values: (required)
        :type properties_values: PropertiesValues
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the devices_v2_update_properties_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.devices_v2_update_properties_with_http_info(id, properties_values, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_v2_update_properties_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the device")], properties_values : PropertiesValues, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """updateProperties devices_v2  # noqa: E501

        Update device properties last values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_v2_update_properties_with_http_info(id, properties_values, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the device (required)
        :type id: str
        :param properties_values: (required)
        :type properties_values: PropertiesValues
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'properties_values',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_update_properties" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['properties_values'] is not None:
            _body_params = _params['properties_values']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error+json', 'text/plain'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v2/devices/{id}/properties', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
