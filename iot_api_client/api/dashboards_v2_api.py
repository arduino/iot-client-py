# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr, constr, validator

from typing import List, Optional

from iot_api_client.models.arduino_dashboardshare import ArduinoDashboardshare
from iot_api_client.models.arduino_dashboardv2 import ArduinoDashboardv2
from iot_api_client.models.arduino_dashboardv2template import ArduinoDashboardv2template
from iot_api_client.models.arduino_variableslinks import ArduinoVariableslinks
from iot_api_client.models.clone import Clone
from iot_api_client.models.dashboardshare import Dashboardshare
from iot_api_client.models.dashboardv2 import Dashboardv2
from iot_api_client.models.sharerequest import Sharerequest
from iot_api_client.models.widgetlink import Widgetlink

from iot_api_client.api_client import ApiClient
from iot_api_client.api_response import ApiResponse
from iot_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DashboardsV2Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def dashboards_v2_clone(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], clone : Clone, x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDashboardv2:  # noqa: E501
        """clone dashboards_v2  # noqa: E501

        Clone an existing dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_clone(id, clone, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param clone: (required)
        :type clone: Clone
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDashboardv2
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_clone_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_clone_with_http_info(id, clone, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_clone_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], clone : Clone, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """clone dashboards_v2  # noqa: E501

        Clone an existing dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_clone_with_http_info(id, clone, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param clone: (required)
        :type clone: Clone
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDashboardv2, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'clone',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_clone" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['clone'] is not None:
            _body_params = _params['clone']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.dashboardv2+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '201': "ArduinoDashboardv2",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/dashboards/{id}/clone', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_create(self, dashboardv2 : Annotated[Dashboardv2, Field(..., description="DashboardV2Payload describes a dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDashboardv2:  # noqa: E501
        """create dashboards_v2  # noqa: E501

        Create a new dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_create(dashboardv2, x_organization, async_req=True)
        >>> result = thread.get()

        :param dashboardv2: DashboardV2Payload describes a dashboard (required)
        :type dashboardv2: Dashboardv2
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDashboardv2
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_create_with_http_info(dashboardv2, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_create_with_http_info(self, dashboardv2 : Annotated[Dashboardv2, Field(..., description="DashboardV2Payload describes a dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """create dashboards_v2  # noqa: E501

        Create a new dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_create_with_http_info(dashboardv2, x_organization, async_req=True)
        >>> result = thread.get()

        :param dashboardv2: DashboardV2Payload describes a dashboard (required)
        :type dashboardv2: Dashboardv2
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDashboardv2, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'dashboardv2',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dashboardv2'] is not None:
            _body_params = _params['dashboardv2']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.dashboardv2+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '201': "ArduinoDashboardv2",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/dashboards', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_delete(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> None:  # noqa: E501
        """delete dashboards_v2  # noqa: E501

        Delete a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_delete(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_delete_with_http_info(id, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_delete_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """delete dashboards_v2  # noqa: E501

        Delete a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_delete_with_http_info(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error+json', 'text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v2/dashboards/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_delete_share(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], user_id : Annotated[StrictStr, Field(..., description="The id of the user")], x_organization : Optional[StrictStr] = None, **kwargs) -> None:  # noqa: E501
        """deleteShare dashboards_v2  # noqa: E501

        Delete a user the dashboard has been shared with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_delete_share(id, user_id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param user_id: The id of the user (required)
        :type user_id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_delete_share_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_delete_share_with_http_info(id, user_id, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_delete_share_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], user_id : Annotated[StrictStr, Field(..., description="The id of the user")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """deleteShare dashboards_v2  # noqa: E501

        Delete a user the dashboard has been shared with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_delete_share_with_http_info(id, user_id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param user_id: The id of the user (required)
        :type user_id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'user_id',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_delete_share" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error+json', 'text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v2/dashboards/{id}/shares/{user_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_link(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], widget_id : Annotated[StrictStr, Field(..., description="The id of the widget")], widgetlink : Widgetlink, x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoVariableslinks:  # noqa: E501
        """link dashboards_v2  # noqa: E501

        Link or detach widget variables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_link(id, widget_id, widgetlink, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param widget_id: The id of the widget (required)
        :type widget_id: str
        :param widgetlink: (required)
        :type widgetlink: Widgetlink
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoVariableslinks
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_link_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_link_with_http_info(id, widget_id, widgetlink, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_link_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], widget_id : Annotated[StrictStr, Field(..., description="The id of the widget")], widgetlink : Widgetlink, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """link dashboards_v2  # noqa: E501

        Link or detach widget variables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_link_with_http_info(id, widget_id, widgetlink, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param widget_id: The id of the widget (required)
        :type widget_id: str
        :param widgetlink: (required)
        :type widgetlink: Widgetlink
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoVariableslinks, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'widget_id',
            'widgetlink',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_link" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['widget_id']:
            _path_params['widgetId'] = _params['widget_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['widgetlink'] is not None:
            _body_params = _params['widgetlink']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.variableslinks+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoVariableslinks",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/dashboards/{id}/widgets/{widgetId}/variables', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_list(self, name : Annotated[Optional[constr(strict=True, max_length=64)], Field(description="The name of the dashboard")] = None, user_id : Annotated[Optional[StrictStr], Field(description="The user_id of the dashboard's owner")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> List[ArduinoDashboardv2]:  # noqa: E501
        """list dashboards_v2  # noqa: E501

        Returns the list of dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_list(name, user_id, x_organization, async_req=True)
        >>> result = thread.get()

        :param name: The name of the dashboard
        :type name: str
        :param user_id: The user_id of the dashboard's owner
        :type user_id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ArduinoDashboardv2]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_list_with_http_info(name, user_id, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_list_with_http_info(self, name : Annotated[Optional[constr(strict=True, max_length=64)], Field(description="The name of the dashboard")] = None, user_id : Annotated[Optional[StrictStr], Field(description="The user_id of the dashboard's owner")] = None, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """list dashboards_v2  # noqa: E501

        Returns the list of dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_list_with_http_info(name, user_id, x_organization, async_req=True)
        >>> result = thread.get()

        :param name: The name of the dashboard
        :type name: str
        :param user_id: The user_id of the dashboard's owner
        :type user_id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ArduinoDashboardv2], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'user_id',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('user_id', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.dashboardv2+json; type=collection', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "List[ArduinoDashboardv2]",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/dashboards', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_list_shares(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> List[ArduinoDashboardshare]:  # noqa: E501
        """listShares dashboards_v2  # noqa: E501

        List of users the dashboard has been shared with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_list_shares(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ArduinoDashboardshare]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_list_shares_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_list_shares_with_http_info(id, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_list_shares_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """listShares dashboards_v2  # noqa: E501

        List of users the dashboard has been shared with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_list_shares_with_http_info(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ArduinoDashboardshare], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_list_shares" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.dashboardshare+json; type=collection', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "List[ArduinoDashboardshare]",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/dashboards/{id}/shares', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_request_access(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], sharerequest : Sharerequest, x_organization : Optional[StrictStr] = None, **kwargs) -> None:  # noqa: E501
        """requestAccess dashboards_v2  # noqa: E501

        Request access to a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_request_access(id, sharerequest, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param sharerequest: (required)
        :type sharerequest: Sharerequest
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_request_access_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_request_access_with_http_info(id, sharerequest, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_request_access_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], sharerequest : Sharerequest, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """requestAccess dashboards_v2  # noqa: E501

        Request access to a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_request_access_with_http_info(id, sharerequest, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param sharerequest: (required)
        :type sharerequest: Sharerequest
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'sharerequest',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_request_access" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['sharerequest'] is not None:
            _body_params = _params['sharerequest']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error+json', 'text/plain'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v2/dashboards/{id}/share_request', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_share(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], dashboardshare : Dashboardshare, x_organization : Optional[StrictStr] = None, **kwargs) -> None:  # noqa: E501
        """share dashboards_v2  # noqa: E501

        Share a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_share(id, dashboardshare, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param dashboardshare: (required)
        :type dashboardshare: Dashboardshare
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_share_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_share_with_http_info(id, dashboardshare, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_share_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], dashboardshare : Dashboardshare, x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """share dashboards_v2  # noqa: E501

        Share a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_share_with_http_info(id, dashboardshare, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param dashboardshare: (required)
        :type dashboardshare: Dashboardshare
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'dashboardshare',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_share" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dashboardshare'] is not None:
            _body_params = _params['dashboardshare']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error+json', 'text/plain'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v2/dashboards/{id}/shares', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_show(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDashboardv2:  # noqa: E501
        """show dashboards_v2  # noqa: E501

        Show a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_show(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDashboardv2
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_show_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_show_with_http_info(id, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_show_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """show dashboards_v2  # noqa: E501

        Show a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_show_with_http_info(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDashboardv2, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_show" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.dashboardv2+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoDashboardv2",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/dashboards/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_template(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDashboardv2template:  # noqa: E501
        """template dashboards_v2  # noqa: E501

        Get a template of the dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_template(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDashboardv2template
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_template_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_template_with_http_info(id, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_template_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """template dashboards_v2  # noqa: E501

        Get a template of the dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_template_with_http_info(id, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDashboardv2template, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_template" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.dashboardv2template+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoDashboardv2template",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/dashboards/{id}/template', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def dashboards_v2_update(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], dashboardv2 : Annotated[Dashboardv2, Field(..., description="DashboardV2Payload describes a dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> ArduinoDashboardv2:  # noqa: E501
        """update dashboards_v2  # noqa: E501

        Updates an existing dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_update(id, dashboardv2, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param dashboardv2: DashboardV2Payload describes a dashboard (required)
        :type dashboardv2: Dashboardv2
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArduinoDashboardv2
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the dashboards_v2_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.dashboards_v2_update_with_http_info(id, dashboardv2, x_organization, **kwargs)  # noqa: E501

    @validate_arguments
    def dashboards_v2_update_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the dashboard")], dashboardv2 : Annotated[Dashboardv2, Field(..., description="DashboardV2Payload describes a dashboard")], x_organization : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """update dashboards_v2  # noqa: E501

        Updates an existing dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboards_v2_update_with_http_info(id, dashboardv2, x_organization, async_req=True)
        >>> result = thread.get()

        :param id: The id of the dashboard (required)
        :type id: str
        :param dashboardv2: DashboardV2Payload describes a dashboard (required)
        :type dashboardv2: Dashboardv2
        :param x_organization:
        :type x_organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArduinoDashboardv2, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'dashboardv2',
            'x_organization'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_v2_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organization']:
            _header_params['X-Organization'] = _params['x_organization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dashboardv2'] is not None:
            _body_params = _params['dashboardv2']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.arduino.dashboardv2+json', 'application/vnd.goa.error+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ArduinoDashboardv2",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': None,
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/dashboards/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
