# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import iot_api_client
from iot_api_client.models.arduino_thing import ArduinoThing  # noqa: E501
from iot_api_client.rest import ApiException

class TestArduinoThing(unittest.TestCase):
    """ArduinoThing unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ArduinoThing
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = iot_api_client.models.arduino_thing.ArduinoThing()  # noqa: E501
        if include_optional :
            return ArduinoThing(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                device_fqbn = '0', 
                device_id = '0', 
                device_name = '0', 
                device_type = '0', 
                href = '0', 
                id = '0', 
                name = '0', 
                organization_id = '0', 
                properties = [
                    iot_api_client.models.mediatype_identifier:_application/vnd/arduino/property+json;_view=default.Mediatype identifier: application/vnd.arduino.property+json; view=default(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        href = '0', 
                        id = '0', 
                        last_value = null, 
                        max_value = 1.337, 
                        min_value = 1.337, 
                        name = '0', 
                        permission = '0', 
                        persist = True, 
                        sync_id = '0', 
                        tag = 1.337, 
                        thing_id = '0', 
                        thing_name = '0', 
                        type = '0', 
                        update_parameter = 1.337, 
                        update_strategy = '0', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        value_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        variable_name = '0', )
                    ], 
                properties_count = 56, 
                sketch_id = '0', 
                tags = { }, 
                timezone = '0', 
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                user_id = '0', 
                webhook_active = True, 
                webhook_uri = '0'
            )
        else :
            return ArduinoThing(
                href = '0',
                id = '0',
                name = '0',
                timezone = '0',
                user_id = '0',
        )

    def testArduinoThing(self):
        """Test ArduinoThing"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
