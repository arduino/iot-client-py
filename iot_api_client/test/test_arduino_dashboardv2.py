# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import iot_api_client
from iot_api_client.models.arduino_dashboardv2 import ArduinoDashboardv2  # noqa: E501
from iot_api_client.rest import ApiException

class TestArduinoDashboardv2(unittest.TestCase):
    """ArduinoDashboardv2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ArduinoDashboardv2
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = iot_api_client.models.arduino_dashboardv2.ArduinoDashboardv2()  # noqa: E501
        if include_optional :
            return ArduinoDashboardv2(
                created_by = iot_api_client.models.mediatype_identifier:_application/vnd/arduino/dashboardowner+json;_view=default.Mediatype identifier: application/vnd.arduino.dashboardowner+json; view=default(
                    user_id = '0', 
                    username = '0', ), 
                id = '0', 
                name = '0', 
                organization_id = '0', 
                shared_by = iot_api_client.models.mediatype_identifier:_application/vnd/arduino/dashboardshare+json;_view=default.Mediatype identifier: application/vnd.arduino.dashboardshare+json; view=default(
                    user_id = '0', 
                    username = '0', ), 
                shared_with = [
                    iot_api_client.models.mediatype_identifier:_application/vnd/arduino/dashboardshare+json;_view=default.Mediatype identifier: application/vnd.arduino.dashboardshare+json; view=default(
                        user_id = '0', 
                        username = '0', )
                    ], 
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                widgets = [
                    iot_api_client.models.mediatype_identifier:_application/vnd/arduino/widgetv2+json;_view=default.Mediatype identifier: application/vnd.arduino.widgetv2+json; view=default(
                        has_permission_incompatibility = True, 
                        has_type_incompatibility = True, 
                        has_unlinked_variable = True, 
                        height = 56, 
                        height_mobile = 56, 
                        id = '0', 
                        name = '0', 
                        options = { }, 
                        type = 'slider, gauge', 
                        variables = [
                            iot_api_client.models.mediatype_identifier:_application/vnd/arduino/linkedvariable+json;_view=default.Mediatype identifier: application/vnd.arduino.linkedvariable+json; view=default(
                                id = '0', 
                                last_value = null, 
                                last_value_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                name = '0', 
                                permission = '0', 
                                thing_id = '0', 
                                thing_name = '0', 
                                thing_timezone = iot_api_client.models.mediatype_identifier:_application/vnd/arduino/timezone+json;_view=default.Mediatype identifier: application/vnd.arduino.timezone+json; view=default(
                                    name = '0', 
                                    offset = 56, 
                                    until = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                type = '0', 
                                variable_name = '0', )
                            ], 
                        width = 56, 
                        width_mobile = 56, 
                        x = 56, 
                        x_mobile = 56, 
                        y = 56, 
                        y_mobile = 56, )
                    ]
            )
        else :
            return ArduinoDashboardv2(
                id = '0',
                name = '0',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )

    def testArduinoDashboardv2(self):
        """Test ArduinoDashboardv2"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
