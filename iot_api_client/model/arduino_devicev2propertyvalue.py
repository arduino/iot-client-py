# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iot_api_client import schemas  # noqa: F401


class ArduinoDevicev2propertyvalue(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ArduinoDevicev2propertyvalue media type (default view)
    """


    class MetaOapg:
        
        class properties:
            created_at = schemas.DateTimeSchema
            
            
            class value(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        payload = schemas.StrSchema
                        seqno = schemas.Int64Schema
                        
                        
                        class statistics(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    adr = schemas.Float64Schema
                                    channel = schemas.Float64Schema
                                    duplicate = schemas.Float64Schema
                                    freq = schemas.Float64Schema
                                    modBW = schemas.Float64Schema
                                    rssi = schemas.Float64Schema
                                    seqno = schemas.Float64Schema
                                    sf = schemas.Float64Schema
                                    snr = schemas.Float64Schema
                                    time = schemas.Float64Schema
                                    __annotations__ = {
                                        "adr": adr,
                                        "channel": channel,
                                        "duplicate": duplicate,
                                        "freq": freq,
                                        "modBW": modBW,
                                        "rssi": rssi,
                                        "seqno": seqno,
                                        "sf": sf,
                                        "snr": snr,
                                        "time": time,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["adr"]) -> MetaOapg.properties.adr: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["duplicate"]) -> MetaOapg.properties.duplicate: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["freq"]) -> MetaOapg.properties.freq: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["modBW"]) -> MetaOapg.properties.modBW: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["rssi"]) -> MetaOapg.properties.rssi: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["seqno"]) -> MetaOapg.properties.seqno: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["sf"]) -> MetaOapg.properties.sf: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["snr"]) -> MetaOapg.properties.snr: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["adr", "channel", "duplicate", "freq", "modBW", "rssi", "seqno", "sf", "snr", "time", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["adr"]) -> typing.Union[MetaOapg.properties.adr, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union[MetaOapg.properties.channel, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["duplicate"]) -> typing.Union[MetaOapg.properties.duplicate, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["freq"]) -> typing.Union[MetaOapg.properties.freq, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["modBW"]) -> typing.Union[MetaOapg.properties.modBW, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["rssi"]) -> typing.Union[MetaOapg.properties.rssi, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["seqno"]) -> typing.Union[MetaOapg.properties.seqno, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["sf"]) -> typing.Union[MetaOapg.properties.sf, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["snr"]) -> typing.Union[MetaOapg.properties.snr, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["adr", "channel", "duplicate", "freq", "modBW", "rssi", "seqno", "sf", "snr", "time", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                adr: typing.Union[MetaOapg.properties.adr, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                channel: typing.Union[MetaOapg.properties.channel, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                duplicate: typing.Union[MetaOapg.properties.duplicate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                freq: typing.Union[MetaOapg.properties.freq, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                modBW: typing.Union[MetaOapg.properties.modBW, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                rssi: typing.Union[MetaOapg.properties.rssi, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                seqno: typing.Union[MetaOapg.properties.seqno, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                sf: typing.Union[MetaOapg.properties.sf, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                snr: typing.Union[MetaOapg.properties.snr, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'statistics':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    adr=adr,
                                    channel=channel,
                                    duplicate=duplicate,
                                    freq=freq,
                                    modBW=modBW,
                                    rssi=rssi,
                                    seqno=seqno,
                                    sf=sf,
                                    snr=snr,
                                    time=time,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "payload": payload,
                            "seqno": seqno,
                            "statistics": statistics,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["payload"]) -> MetaOapg.properties.payload: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["seqno"]) -> MetaOapg.properties.seqno: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> MetaOapg.properties.statistics: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["payload", "seqno", "statistics", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["payload"]) -> typing.Union[MetaOapg.properties.payload, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["seqno"]) -> typing.Union[MetaOapg.properties.seqno, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> typing.Union[MetaOapg.properties.statistics, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payload", "seqno", "statistics", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    payload: typing.Union[MetaOapg.properties.payload, str, schemas.Unset] = schemas.unset,
                    seqno: typing.Union[MetaOapg.properties.seqno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    statistics: typing.Union[MetaOapg.properties.statistics, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'value':
                    return super().__new__(
                        cls,
                        *_args,
                        payload=payload,
                        seqno=seqno,
                        statistics=statistics,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "created_at": created_at,
                "value": value,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created_at", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created_at", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ArduinoDevicev2propertyvalue':
        return super().__new__(
            cls,
            *_args,
            created_at=created_at,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )
