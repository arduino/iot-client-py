# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iot_api_client import schemas  # noqa: F401


class ArduinoDevicev2properties(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ArduinoDevicev2properties media type (default view)
    """


    class MetaOapg:
        required = {
            "data_retention_days",
            "user_id",
            "deviceId",
            "properties",
        }
        
        class properties:
            data_retention_days = schemas.Float64Schema
            deviceId = schemas.UUIDSchema
        
            @staticmethod
            def properties() -> typing.Type['ArduinoPropertyCollection']:
                return ArduinoPropertyCollection
            user_id = schemas.UUIDSchema
            __annotations__ = {
                "data_retention_days": data_retention_days,
                "deviceId": deviceId,
                "properties": properties,
                "user_id": user_id,
            }
    
    data_retention_days: MetaOapg.properties.data_retention_days
    user_id: MetaOapg.properties.user_id
    deviceId: MetaOapg.properties.deviceId
    properties: 'ArduinoPropertyCollection'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_retention_days"]) -> MetaOapg.properties.data_retention_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceId"]) -> MetaOapg.properties.deviceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> 'ArduinoPropertyCollection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data_retention_days", "deviceId", "properties", "user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_retention_days"]) -> MetaOapg.properties.data_retention_days: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceId"]) -> MetaOapg.properties.deviceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> 'ArduinoPropertyCollection': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data_retention_days", "deviceId", "properties", "user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        data_retention_days: typing.Union[MetaOapg.properties.data_retention_days, decimal.Decimal, int, float, ],
        user_id: typing.Union[MetaOapg.properties.user_id, str, uuid.UUID, ],
        deviceId: typing.Union[MetaOapg.properties.deviceId, str, uuid.UUID, ],
        properties: 'ArduinoPropertyCollection',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ArduinoDevicev2properties':
        return super().__new__(
            cls,
            *_args,
            data_retention_days=data_retention_days,
            user_id=user_id,
            deviceId=deviceId,
            properties=properties,
            _configuration=_configuration,
            **kwargs,
        )

from iot_api_client.model.arduino_property_collection import ArduinoPropertyCollection
