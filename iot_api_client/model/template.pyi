# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iot_api_client import schemas  # noqa: F401


class Template(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    TemplatePayload describes the needed attribute to apply a template
    """


    class MetaOapg:
        required = {
            "template_name",
        }
        
        class properties:
            template_name = schemas.StrSchema
            custom_template_id = schemas.StrSchema
            
            
            class prefix_name(
                schemas.StrSchema
            ):
                pass
            
            
            class things_options(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'things_options':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "template_name": template_name,
                "custom_template_id": custom_template_id,
                "prefix_name": prefix_name,
                "things_options": things_options,
            }
    
    template_name: MetaOapg.properties.template_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template_name"]) -> MetaOapg.properties.template_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_template_id"]) -> MetaOapg.properties.custom_template_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefix_name"]) -> MetaOapg.properties.prefix_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["things_options"]) -> MetaOapg.properties.things_options: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["template_name", "custom_template_id", "prefix_name", "things_options", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template_name"]) -> MetaOapg.properties.template_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_template_id"]) -> typing.Union[MetaOapg.properties.custom_template_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefix_name"]) -> typing.Union[MetaOapg.properties.prefix_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["things_options"]) -> typing.Union[MetaOapg.properties.things_options, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["template_name", "custom_template_id", "prefix_name", "things_options", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        template_name: typing.Union[MetaOapg.properties.template_name, str, ],
        custom_template_id: typing.Union[MetaOapg.properties.custom_template_id, str, schemas.Unset] = schemas.unset,
        prefix_name: typing.Union[MetaOapg.properties.prefix_name, str, schemas.Unset] = schemas.unset,
        things_options: typing.Union[MetaOapg.properties.things_options, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Template':
        return super().__new__(
            cls,
            *_args,
            template_name=template_name,
            custom_template_id=custom_template_id,
            prefix_name=prefix_name,
            things_options=things_options,
            _configuration=_configuration,
            **kwargs,
        )
