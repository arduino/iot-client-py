# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iot_api_client import schemas  # noqa: F401


class ArduinoLoradevicev1(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ArduinoLoradevicev1 media type (default view)
    """


    class MetaOapg:
        required = {
            "app_key",
            "device_id",
            "eui",
            "app_eui",
        }
        
        class properties:
            app_eui = schemas.StrSchema
            app_key = schemas.StrSchema
            device_id = schemas.UUIDSchema
            eui = schemas.StrSchema
            __annotations__ = {
                "app_eui": app_eui,
                "app_key": app_key,
                "device_id": device_id,
                "eui": eui,
            }
    
    app_key: MetaOapg.properties.app_key
    device_id: MetaOapg.properties.device_id
    eui: MetaOapg.properties.eui
    app_eui: MetaOapg.properties.app_eui
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_eui"]) -> MetaOapg.properties.app_eui: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_key"]) -> MetaOapg.properties.app_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eui"]) -> MetaOapg.properties.eui: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["app_eui", "app_key", "device_id", "eui", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_eui"]) -> MetaOapg.properties.app_eui: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_key"]) -> MetaOapg.properties.app_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eui"]) -> MetaOapg.properties.eui: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["app_eui", "app_key", "device_id", "eui", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        app_key: typing.Union[MetaOapg.properties.app_key, str, ],
        device_id: typing.Union[MetaOapg.properties.device_id, str, uuid.UUID, ],
        eui: typing.Union[MetaOapg.properties.eui, str, ],
        app_eui: typing.Union[MetaOapg.properties.app_eui, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ArduinoLoradevicev1':
        return super().__new__(
            cls,
            *_args,
            app_key=app_key,
            device_id=device_id,
            eui=eui,
            app_eui=app_eui,
            _configuration=_configuration,
            **kwargs,
        )
