# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iot_api_client import schemas  # noqa: F401


class ModelProperty(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PropertyPayload describes a property of a thing. No field is mandatory
    """


    class MetaOapg:
        required = {
            "update_strategy",
            "name",
            "permission",
            "type",
        }
        
        class properties:
            name = schemas.StrSchema
            
            
            class permission(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "READ_ONLY": "ONLY",
                        "READ_WRITE": "WRITE",
                    }
                
                @schemas.classproperty
                def ONLY(cls):
                    return cls("READ_ONLY")
                
                @schemas.classproperty
                def WRITE(cls):
                    return cls("READ_WRITE")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ANALOG": "ANALOG",
                        "CHARSTRING": "CHARSTRING",
                        "FLOAT": "FLOAT",
                        "INT": "INT",
                        "LENGHT_C": "LENGHT_C",
                        "LENGHT_I": "LENGHT_I",
                        "LENGHT_M": "LENGHT_M",
                        "PERCENTAGE": "PERCENTAGE",
                        "STATUS": "STATUS",
                        "TEMPERATURE_C": "TEMPERATURE_C",
                        "TEMPERATURE_F": "TEMPERATURE_F",
                        "METER": "METER",
                        "KILOGRAM": "KILOGRAM",
                        "GRAM": "GRAM",
                        "SECOND": "SECOND",
                        "AMPERE": "AMPERE",
                        "KELVIN": "KELVIN",
                        "CANDELA": "CANDELA",
                        "MOLE": "MOLE",
                        "HERTZ": "HERTZ",
                        "RADIAN": "RADIAN",
                        "STERADIAN": "STERADIAN",
                        "NEWTON": "NEWTON",
                        "PASCAL": "PASCAL",
                        "JOULE": "JOULE",
                        "WATT": "WATT",
                        "COULOMB": "COULOMB",
                        "VOLT": "VOLT",
                        "FARAD": "FARAD",
                        "OHM": "OHM",
                        "SIEMENS": "SIEMENS",
                        "WEBER": "WEBER",
                        "TESLA": "TESLA",
                        "HENRY": "HENRY",
                        "DEGREES_CELSIUS": "DEGREES_CELSIUS",
                        "LUMEN": "LUMEN",
                        "LUX": "LUX",
                        "BECQUEREL": "BECQUEREL",
                        "GRAY": "GRAY",
                        "SIEVERT": "SIEVERT",
                        "KATAL": "KATAL",
                        "SQUARE_METER": "SQUARE_METER",
                        "CUBIC_METER": "CUBIC_METER",
                        "LITER": "LITER",
                        "METER_PER_SECOND": "METER_PER_SECOND",
                        "METER_PER_SQUARE_SECOND": "METER_PER_SQUARE_SECOND",
                        "CUBIC_METER_PER_SECOND": "CUBIC_METER_PER_SECOND",
                        "LITER_PER_SECOND": "LITER_PER_SECOND",
                        "WATT_PER_SQUARE_METER": "WATT_PER_SQUARE_METER",
                        "CANDELA_PER_SQUARE_METER": "CANDELA_PER_SQUARE_METER",
                        "BIT": "BIT",
                        "BIT_PER_SECOND": "BIT_PER_SECOND",
                        "DEGREES_LATITUDE": "DEGREES_LATITUDE",
                        "DEGREES_LONGITUDE": "DEGREES_LONGITUDE",
                        "PH_VALUE": "PH_VALUE",
                        "DECIBEL": "DECIBEL",
                        "DECIBEL_1W": "DECIBEL_1W",
                        "BEL": "BEL",
                        "COUNT": "COUNT",
                        "RATIO_DIV": "RATIO_DIV",
                        "RATIO_MOD": "RATIO_MOD",
                        "PERCENTAGE_RELATIVE_HUMIDITY": "PERCENTAGE_RELATIVE_HUMIDITY",
                        "PERCENTAGE_BATTERY_LEVEL": "PERCENTAGE_BATTERY_LEVEL",
                        "SECONDS_BATTERY_LEVEL": "SECONDS_BATTERY_LEVEL",
                        "EVENT_RATE_SECOND": "EVENT_RATE_SECOND",
                        "EVENT_RATE_MINUTE": "EVENT_RATE_MINUTE",
                        "HEART_RATE": "HEART_RATE",
                        "HEART_BEATS": "HEART_BEATS",
                        "SIEMENS_PER_METER": "SIEMENS_PER_METER",
                        "LOCATION": "LOCATION",
                        "COLOR_HSB": "COLOR_HSB",
                        "COLOR_RGB": "COLOR_RGB",
                        "GENERIC_COMPLEX_PROPERTY": "GENERIC_COMPLEX_PROPERTY",
                        "HOME_COLORED_LIGHT": "HOME_COLORED_LIGHT",
                        "HOME_DIMMED_LIGHT": "HOME_DIMMED_LIGHT",
                        "HOME_LIGHT": "HOME_LIGHT",
                        "HOME_CONTACT_SENSOR": "HOME_CONTACT_SENSOR",
                        "HOME_MOTION_SENSOR": "HOME_MOTION_SENSOR",
                        "HOME_SMART_PLUG": "HOME_SMART_PLUG",
                        "HOME_TEMPERATURE": "HOME_TEMPERATURE",
                        "HOME_TEMPERATURE_C": "HOME_TEMPERATURE_C",
                        "HOME_TEMPERATURE_F": "HOME_TEMPERATURE_F",
                        "HOME_SWITCH": "HOME_SWITCH",
                        "HOME_TELEVISION": "HOME_TELEVISION",
                        "ENERGY": "ENERGY",
                        "FORCE": "FORCE",
                        "TEMPERATURE": "TEMPERATURE",
                        "POWER": "POWER",
                        "ELECTRIC_CURRENT": "ELECTRIC_CURRENT",
                        "ELECTRIC_POTENTIAL": "ELECTRIC_POTENTIAL",
                        "ELECTRICAL_RESISTANCE": "ELECTRICAL_RESISTANCE",
                        "CAPACITANCE": "CAPACITANCE",
                        "TIME": "TIME",
                        "FREQUENCY": "FREQUENCY",
                        "DATA_RATE": "DATA_RATE",
                        "ACCELERATION": "ACCELERATION",
                        "AREA": "AREA",
                        "LENGTH": "LENGTH",
                        "VELOCITY": "VELOCITY",
                        "MASS": "MASS",
                        "VOLUME": "VOLUME",
                        "FLOW_RATE": "FLOW_RATE",
                        "ANGLE": "ANGLE",
                        "ILLUMINANCE": "ILLUMINANCE",
                        "LUMINOUS_FLUX": "LUMINOUS_FLUX",
                        "LUMINANCE": "LUMINANCE",
                        "LUMINOUS_INTENSITY": "LUMINOUS_INTENSITY",
                        "LOGARITHMIC_QUANTITY": "LOGARITHMIC_QUANTITY",
                        "PRESSURE": "PRESSURE",
                        "INFORMATION_CONTENT": "INFORMATION_CONTENT",
                        "SCHEDULE": "SCHEDULE",
                    }
                
                @schemas.classproperty
                def ANALOG(cls):
                    return cls("ANALOG")
                
                @schemas.classproperty
                def CHARSTRING(cls):
                    return cls("CHARSTRING")
                
                @schemas.classproperty
                def FLOAT(cls):
                    return cls("FLOAT")
                
                @schemas.classproperty
                def INT(cls):
                    return cls("INT")
                
                @schemas.classproperty
                def LENGHT_C(cls):
                    return cls("LENGHT_C")
                
                @schemas.classproperty
                def LENGHT_I(cls):
                    return cls("LENGHT_I")
                
                @schemas.classproperty
                def LENGHT_M(cls):
                    return cls("LENGHT_M")
                
                @schemas.classproperty
                def PERCENTAGE(cls):
                    return cls("PERCENTAGE")
                
                @schemas.classproperty
                def STATUS(cls):
                    return cls("STATUS")
                
                @schemas.classproperty
                def TEMPERATURE_C(cls):
                    return cls("TEMPERATURE_C")
                
                @schemas.classproperty
                def TEMPERATURE_F(cls):
                    return cls("TEMPERATURE_F")
                
                @schemas.classproperty
                def METER(cls):
                    return cls("METER")
                
                @schemas.classproperty
                def KILOGRAM(cls):
                    return cls("KILOGRAM")
                
                @schemas.classproperty
                def GRAM(cls):
                    return cls("GRAM")
                
                @schemas.classproperty
                def SECOND(cls):
                    return cls("SECOND")
                
                @schemas.classproperty
                def AMPERE(cls):
                    return cls("AMPERE")
                
                @schemas.classproperty
                def KELVIN(cls):
                    return cls("KELVIN")
                
                @schemas.classproperty
                def CANDELA(cls):
                    return cls("CANDELA")
                
                @schemas.classproperty
                def MOLE(cls):
                    return cls("MOLE")
                
                @schemas.classproperty
                def HERTZ(cls):
                    return cls("HERTZ")
                
                @schemas.classproperty
                def RADIAN(cls):
                    return cls("RADIAN")
                
                @schemas.classproperty
                def STERADIAN(cls):
                    return cls("STERADIAN")
                
                @schemas.classproperty
                def NEWTON(cls):
                    return cls("NEWTON")
                
                @schemas.classproperty
                def PASCAL(cls):
                    return cls("PASCAL")
                
                @schemas.classproperty
                def JOULE(cls):
                    return cls("JOULE")
                
                @schemas.classproperty
                def WATT(cls):
                    return cls("WATT")
                
                @schemas.classproperty
                def COULOMB(cls):
                    return cls("COULOMB")
                
                @schemas.classproperty
                def VOLT(cls):
                    return cls("VOLT")
                
                @schemas.classproperty
                def FARAD(cls):
                    return cls("FARAD")
                
                @schemas.classproperty
                def OHM(cls):
                    return cls("OHM")
                
                @schemas.classproperty
                def SIEMENS(cls):
                    return cls("SIEMENS")
                
                @schemas.classproperty
                def WEBER(cls):
                    return cls("WEBER")
                
                @schemas.classproperty
                def TESLA(cls):
                    return cls("TESLA")
                
                @schemas.classproperty
                def HENRY(cls):
                    return cls("HENRY")
                
                @schemas.classproperty
                def DEGREES_CELSIUS(cls):
                    return cls("DEGREES_CELSIUS")
                
                @schemas.classproperty
                def LUMEN(cls):
                    return cls("LUMEN")
                
                @schemas.classproperty
                def LUX(cls):
                    return cls("LUX")
                
                @schemas.classproperty
                def BECQUEREL(cls):
                    return cls("BECQUEREL")
                
                @schemas.classproperty
                def GRAY(cls):
                    return cls("GRAY")
                
                @schemas.classproperty
                def SIEVERT(cls):
                    return cls("SIEVERT")
                
                @schemas.classproperty
                def KATAL(cls):
                    return cls("KATAL")
                
                @schemas.classproperty
                def SQUARE_METER(cls):
                    return cls("SQUARE_METER")
                
                @schemas.classproperty
                def CUBIC_METER(cls):
                    return cls("CUBIC_METER")
                
                @schemas.classproperty
                def LITER(cls):
                    return cls("LITER")
                
                @schemas.classproperty
                def METER_PER_SECOND(cls):
                    return cls("METER_PER_SECOND")
                
                @schemas.classproperty
                def METER_PER_SQUARE_SECOND(cls):
                    return cls("METER_PER_SQUARE_SECOND")
                
                @schemas.classproperty
                def CUBIC_METER_PER_SECOND(cls):
                    return cls("CUBIC_METER_PER_SECOND")
                
                @schemas.classproperty
                def LITER_PER_SECOND(cls):
                    return cls("LITER_PER_SECOND")
                
                @schemas.classproperty
                def WATT_PER_SQUARE_METER(cls):
                    return cls("WATT_PER_SQUARE_METER")
                
                @schemas.classproperty
                def CANDELA_PER_SQUARE_METER(cls):
                    return cls("CANDELA_PER_SQUARE_METER")
                
                @schemas.classproperty
                def BIT(cls):
                    return cls("BIT")
                
                @schemas.classproperty
                def BIT_PER_SECOND(cls):
                    return cls("BIT_PER_SECOND")
                
                @schemas.classproperty
                def DEGREES_LATITUDE(cls):
                    return cls("DEGREES_LATITUDE")
                
                @schemas.classproperty
                def DEGREES_LONGITUDE(cls):
                    return cls("DEGREES_LONGITUDE")
                
                @schemas.classproperty
                def PH_VALUE(cls):
                    return cls("PH_VALUE")
                
                @schemas.classproperty
                def DECIBEL(cls):
                    return cls("DECIBEL")
                
                @schemas.classproperty
                def DECIBEL_1W(cls):
                    return cls("DECIBEL_1W")
                
                @schemas.classproperty
                def BEL(cls):
                    return cls("BEL")
                
                @schemas.classproperty
                def COUNT(cls):
                    return cls("COUNT")
                
                @schemas.classproperty
                def RATIO_DIV(cls):
                    return cls("RATIO_DIV")
                
                @schemas.classproperty
                def RATIO_MOD(cls):
                    return cls("RATIO_MOD")
                
                @schemas.classproperty
                def PERCENTAGE_RELATIVE_HUMIDITY(cls):
                    return cls("PERCENTAGE_RELATIVE_HUMIDITY")
                
                @schemas.classproperty
                def PERCENTAGE_BATTERY_LEVEL(cls):
                    return cls("PERCENTAGE_BATTERY_LEVEL")
                
                @schemas.classproperty
                def SECONDS_BATTERY_LEVEL(cls):
                    return cls("SECONDS_BATTERY_LEVEL")
                
                @schemas.classproperty
                def EVENT_RATE_SECOND(cls):
                    return cls("EVENT_RATE_SECOND")
                
                @schemas.classproperty
                def EVENT_RATE_MINUTE(cls):
                    return cls("EVENT_RATE_MINUTE")
                
                @schemas.classproperty
                def HEART_RATE(cls):
                    return cls("HEART_RATE")
                
                @schemas.classproperty
                def HEART_BEATS(cls):
                    return cls("HEART_BEATS")
                
                @schemas.classproperty
                def SIEMENS_PER_METER(cls):
                    return cls("SIEMENS_PER_METER")
                
                @schemas.classproperty
                def LOCATION(cls):
                    return cls("LOCATION")
                
                @schemas.classproperty
                def COLOR_HSB(cls):
                    return cls("COLOR_HSB")
                
                @schemas.classproperty
                def COLOR_RGB(cls):
                    return cls("COLOR_RGB")
                
                @schemas.classproperty
                def GENERIC_COMPLEX_PROPERTY(cls):
                    return cls("GENERIC_COMPLEX_PROPERTY")
                
                @schemas.classproperty
                def HOME_COLORED_LIGHT(cls):
                    return cls("HOME_COLORED_LIGHT")
                
                @schemas.classproperty
                def HOME_DIMMED_LIGHT(cls):
                    return cls("HOME_DIMMED_LIGHT")
                
                @schemas.classproperty
                def HOME_LIGHT(cls):
                    return cls("HOME_LIGHT")
                
                @schemas.classproperty
                def HOME_CONTACT_SENSOR(cls):
                    return cls("HOME_CONTACT_SENSOR")
                
                @schemas.classproperty
                def HOME_MOTION_SENSOR(cls):
                    return cls("HOME_MOTION_SENSOR")
                
                @schemas.classproperty
                def HOME_SMART_PLUG(cls):
                    return cls("HOME_SMART_PLUG")
                
                @schemas.classproperty
                def HOME_TEMPERATURE(cls):
                    return cls("HOME_TEMPERATURE")
                
                @schemas.classproperty
                def HOME_TEMPERATURE_C(cls):
                    return cls("HOME_TEMPERATURE_C")
                
                @schemas.classproperty
                def HOME_TEMPERATURE_F(cls):
                    return cls("HOME_TEMPERATURE_F")
                
                @schemas.classproperty
                def HOME_SWITCH(cls):
                    return cls("HOME_SWITCH")
                
                @schemas.classproperty
                def HOME_TELEVISION(cls):
                    return cls("HOME_TELEVISION")
                
                @schemas.classproperty
                def ENERGY(cls):
                    return cls("ENERGY")
                
                @schemas.classproperty
                def FORCE(cls):
                    return cls("FORCE")
                
                @schemas.classproperty
                def TEMPERATURE(cls):
                    return cls("TEMPERATURE")
                
                @schemas.classproperty
                def POWER(cls):
                    return cls("POWER")
                
                @schemas.classproperty
                def ELECTRIC_CURRENT(cls):
                    return cls("ELECTRIC_CURRENT")
                
                @schemas.classproperty
                def ELECTRIC_POTENTIAL(cls):
                    return cls("ELECTRIC_POTENTIAL")
                
                @schemas.classproperty
                def ELECTRICAL_RESISTANCE(cls):
                    return cls("ELECTRICAL_RESISTANCE")
                
                @schemas.classproperty
                def CAPACITANCE(cls):
                    return cls("CAPACITANCE")
                
                @schemas.classproperty
                def TIME(cls):
                    return cls("TIME")
                
                @schemas.classproperty
                def FREQUENCY(cls):
                    return cls("FREQUENCY")
                
                @schemas.classproperty
                def DATA_RATE(cls):
                    return cls("DATA_RATE")
                
                @schemas.classproperty
                def ACCELERATION(cls):
                    return cls("ACCELERATION")
                
                @schemas.classproperty
                def AREA(cls):
                    return cls("AREA")
                
                @schemas.classproperty
                def LENGTH(cls):
                    return cls("LENGTH")
                
                @schemas.classproperty
                def VELOCITY(cls):
                    return cls("VELOCITY")
                
                @schemas.classproperty
                def MASS(cls):
                    return cls("MASS")
                
                @schemas.classproperty
                def VOLUME(cls):
                    return cls("VOLUME")
                
                @schemas.classproperty
                def FLOW_RATE(cls):
                    return cls("FLOW_RATE")
                
                @schemas.classproperty
                def ANGLE(cls):
                    return cls("ANGLE")
                
                @schemas.classproperty
                def ILLUMINANCE(cls):
                    return cls("ILLUMINANCE")
                
                @schemas.classproperty
                def LUMINOUS_FLUX(cls):
                    return cls("LUMINOUS_FLUX")
                
                @schemas.classproperty
                def LUMINANCE(cls):
                    return cls("LUMINANCE")
                
                @schemas.classproperty
                def LUMINOUS_INTENSITY(cls):
                    return cls("LUMINOUS_INTENSITY")
                
                @schemas.classproperty
                def LOGARITHMIC_QUANTITY(cls):
                    return cls("LOGARITHMIC_QUANTITY")
                
                @schemas.classproperty
                def PRESSURE(cls):
                    return cls("PRESSURE")
                
                @schemas.classproperty
                def INFORMATION_CONTENT(cls):
                    return cls("INFORMATION_CONTENT")
                
                @schemas.classproperty
                def SCHEDULE(cls):
                    return cls("SCHEDULE")
            
            
            class update_strategy(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ON_CHANGE": "ON_CHANGE",
                        "TIMED": "TIMED",
                    }
                
                @schemas.classproperty
                def ON_CHANGE(cls):
                    return cls("ON_CHANGE")
                
                @schemas.classproperty
                def TIMED(cls):
                    return cls("TIMED")
            max_value = schemas.Float64Schema
            min_value = schemas.Float64Schema
            persist = schemas.BoolSchema
            tag = schemas.Float64Schema
            update_parameter = schemas.Float64Schema
            
            
            class variable_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
                    regex=[{
                        'pattern': r'^[a-zA-Z_][a-zA-Z0-9_]*$',  # noqa: E501
                    }]
            __annotations__ = {
                "name": name,
                "permission": permission,
                "type": type,
                "update_strategy": update_strategy,
                "max_value": max_value,
                "min_value": min_value,
                "persist": persist,
                "tag": tag,
                "update_parameter": update_parameter,
                "variable_name": variable_name,
            }
    
    update_strategy: MetaOapg.properties.update_strategy
    name: MetaOapg.properties.name
    permission: MetaOapg.properties.permission
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_strategy"]) -> MetaOapg.properties.update_strategy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_value"]) -> MetaOapg.properties.max_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_value"]) -> MetaOapg.properties.min_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persist"]) -> MetaOapg.properties.persist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_parameter"]) -> MetaOapg.properties.update_parameter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variable_name"]) -> MetaOapg.properties.variable_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "permission", "type", "update_strategy", "max_value", "min_value", "persist", "tag", "update_parameter", "variable_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_strategy"]) -> MetaOapg.properties.update_strategy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_value"]) -> typing.Union[MetaOapg.properties.max_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_value"]) -> typing.Union[MetaOapg.properties.min_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persist"]) -> typing.Union[MetaOapg.properties.persist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_parameter"]) -> typing.Union[MetaOapg.properties.update_parameter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variable_name"]) -> typing.Union[MetaOapg.properties.variable_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "permission", "type", "update_strategy", "max_value", "min_value", "persist", "tag", "update_parameter", "variable_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_strategy: typing.Union[MetaOapg.properties.update_strategy, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        permission: typing.Union[MetaOapg.properties.permission, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        max_value: typing.Union[MetaOapg.properties.max_value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        min_value: typing.Union[MetaOapg.properties.min_value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        persist: typing.Union[MetaOapg.properties.persist, bool, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        update_parameter: typing.Union[MetaOapg.properties.update_parameter, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        variable_name: typing.Union[MetaOapg.properties.variable_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelProperty':
        return super().__new__(
            cls,
            *_args,
            update_strategy=update_strategy,
            name=name,
            permission=permission,
            type=type,
            max_value=max_value,
            min_value=min_value,
            persist=persist,
            tag=tag,
            update_parameter=update_parameter,
            variable_name=variable_name,
            _configuration=_configuration,
            **kwargs,
        )
