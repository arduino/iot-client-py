# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iot_api_client import schemas  # noqa: F401


class Widget(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Widget describes a dashboard widget
    """


    class MetaOapg:
        required = {
            "options",
            "width",
            "x",
            "y",
            "id",
            "type",
            "height",
        }
        
        class properties:
            height = schemas.Int64Schema
            id = schemas.UUIDSchema
            
            
            class options(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'options':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            type = schemas.StrSchema
            width = schemas.Int64Schema
            x = schemas.Int64Schema
            y = schemas.Int64Schema
            height_mobile = schemas.Int64Schema
            name = schemas.StrSchema
            
            
            class variables(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'variables':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            width_mobile = schemas.Int64Schema
            x_mobile = schemas.Int64Schema
            y_mobile = schemas.Int64Schema
            __annotations__ = {
                "height": height,
                "id": id,
                "options": options,
                "type": type,
                "width": width,
                "x": x,
                "y": y,
                "height_mobile": height_mobile,
                "name": name,
                "variables": variables,
                "width_mobile": width_mobile,
                "x_mobile": x_mobile,
                "y_mobile": y_mobile,
            }
    
    options: MetaOapg.properties.options
    width: MetaOapg.properties.width
    x: MetaOapg.properties.x
    y: MetaOapg.properties.y
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    height: MetaOapg.properties.height
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height_mobile"]) -> MetaOapg.properties.height_mobile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variables"]) -> MetaOapg.properties.variables: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width_mobile"]) -> MetaOapg.properties.width_mobile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x_mobile"]) -> MetaOapg.properties.x_mobile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y_mobile"]) -> MetaOapg.properties.y_mobile: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["height", "id", "options", "type", "width", "x", "y", "height_mobile", "name", "variables", "width_mobile", "x_mobile", "y_mobile", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height_mobile"]) -> typing.Union[MetaOapg.properties.height_mobile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variables"]) -> typing.Union[MetaOapg.properties.variables, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width_mobile"]) -> typing.Union[MetaOapg.properties.width_mobile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x_mobile"]) -> typing.Union[MetaOapg.properties.x_mobile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y_mobile"]) -> typing.Union[MetaOapg.properties.y_mobile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["height", "id", "options", "type", "width", "x", "y", "height_mobile", "name", "variables", "width_mobile", "x_mobile", "y_mobile", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        options: typing.Union[MetaOapg.properties.options, dict, frozendict.frozendict, ],
        width: typing.Union[MetaOapg.properties.width, decimal.Decimal, int, ],
        x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, ],
        y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        height: typing.Union[MetaOapg.properties.height, decimal.Decimal, int, ],
        height_mobile: typing.Union[MetaOapg.properties.height_mobile, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        variables: typing.Union[MetaOapg.properties.variables, list, tuple, schemas.Unset] = schemas.unset,
        width_mobile: typing.Union[MetaOapg.properties.width_mobile, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        x_mobile: typing.Union[MetaOapg.properties.x_mobile, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        y_mobile: typing.Union[MetaOapg.properties.y_mobile, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Widget':
        return super().__new__(
            cls,
            *_args,
            options=options,
            width=width,
            x=x,
            y=y,
            id=id,
            type=type,
            height=height,
            height_mobile=height_mobile,
            name=name,
            variables=variables,
            width_mobile=width_mobile,
            x_mobile=x_mobile,
            y_mobile=y_mobile,
            _configuration=_configuration,
            **kwargs,
        )
