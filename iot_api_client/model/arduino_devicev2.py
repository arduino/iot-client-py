# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iot_api_client import schemas  # noqa: F401


class ArduinoDevicev2(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ArduinoDevicev2 media type (default view)
    """


    class MetaOapg:
        required = {
            "serial",
            "user_id",
            "name",
            "href",
            "id",
            "label",
            "type",
        }
        
        class properties:
            href = schemas.StrSchema
            id = schemas.UUIDSchema
            label = schemas.StrSchema
            name = schemas.StrSchema
            serial = schemas.StrSchema
            type = schemas.StrSchema
            user_id = schemas.UUIDSchema
            
            
            class connection_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "wifi": "WIFI",
                        "eth": "ETH",
                        "wifiandsecret": "WIFIANDSECRET",
                        "gsm": "GSM",
                        "nb": "NB",
                        "lora": "LORA",
                    }
                
                @schemas.classproperty
                def WIFI(cls):
                    return cls("wifi")
                
                @schemas.classproperty
                def ETH(cls):
                    return cls("eth")
                
                @schemas.classproperty
                def WIFIANDSECRET(cls):
                    return cls("wifiandsecret")
                
                @schemas.classproperty
                def GSM(cls):
                    return cls("gsm")
                
                @schemas.classproperty
                def NB(cls):
                    return cls("nb")
                
                @schemas.classproperty
                def LORA(cls):
                    return cls("lora")
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def events() -> typing.Type['ArduinoDevicev2SimplePropertiesCollection']:
                return ArduinoDevicev2SimplePropertiesCollection
            fqbn = schemas.StrSchema
            last_activity_at = schemas.DateTimeSchema
            latest_wifi_fw_version = schemas.StrSchema
            
            
            class metadata(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            no_sketch = schemas.BoolSchema
            organization_id = schemas.UUIDSchema
            ota_available = schemas.BoolSchema
            ota_compatible = schemas.BoolSchema
            required_wifi_fw_version = schemas.StrSchema
            
            
            class tags(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def thing() -> typing.Type['ArduinoThing']:
                return ArduinoThing
        
            @staticmethod
            def webhooks() -> typing.Type['ArduinoDevicev2WebhookCollection']:
                return ArduinoDevicev2WebhookCollection
            wifi_fw_version = schemas.StrSchema
            __annotations__ = {
                "href": href,
                "id": id,
                "label": label,
                "name": name,
                "serial": serial,
                "type": type,
                "user_id": user_id,
                "connection_type": connection_type,
                "created_at": created_at,
                "events": events,
                "fqbn": fqbn,
                "last_activity_at": last_activity_at,
                "latest_wifi_fw_version": latest_wifi_fw_version,
                "metadata": metadata,
                "no_sketch": no_sketch,
                "organization_id": organization_id,
                "ota_available": ota_available,
                "ota_compatible": ota_compatible,
                "required_wifi_fw_version": required_wifi_fw_version,
                "tags": tags,
                "thing": thing,
                "webhooks": webhooks,
                "wifi_fw_version": wifi_fw_version,
            }
    
    serial: MetaOapg.properties.serial
    user_id: MetaOapg.properties.user_id
    name: MetaOapg.properties.name
    href: MetaOapg.properties.href
    id: MetaOapg.properties.id
    label: MetaOapg.properties.label
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial"]) -> MetaOapg.properties.serial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_type"]) -> MetaOapg.properties.connection_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> 'ArduinoDevicev2SimplePropertiesCollection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fqbn"]) -> MetaOapg.properties.fqbn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_activity_at"]) -> MetaOapg.properties.last_activity_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latest_wifi_fw_version"]) -> MetaOapg.properties.latest_wifi_fw_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["no_sketch"]) -> MetaOapg.properties.no_sketch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_id"]) -> MetaOapg.properties.organization_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ota_available"]) -> MetaOapg.properties.ota_available: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ota_compatible"]) -> MetaOapg.properties.ota_compatible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required_wifi_fw_version"]) -> MetaOapg.properties.required_wifi_fw_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thing"]) -> 'ArduinoThing': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhooks"]) -> 'ArduinoDevicev2WebhookCollection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wifi_fw_version"]) -> MetaOapg.properties.wifi_fw_version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["href", "id", "label", "name", "serial", "type", "user_id", "connection_type", "created_at", "events", "fqbn", "last_activity_at", "latest_wifi_fw_version", "metadata", "no_sketch", "organization_id", "ota_available", "ota_compatible", "required_wifi_fw_version", "tags", "thing", "webhooks", "wifi_fw_version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial"]) -> MetaOapg.properties.serial: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_type"]) -> typing.Union[MetaOapg.properties.connection_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> typing.Union['ArduinoDevicev2SimplePropertiesCollection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fqbn"]) -> typing.Union[MetaOapg.properties.fqbn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_activity_at"]) -> typing.Union[MetaOapg.properties.last_activity_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latest_wifi_fw_version"]) -> typing.Union[MetaOapg.properties.latest_wifi_fw_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["no_sketch"]) -> typing.Union[MetaOapg.properties.no_sketch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_id"]) -> typing.Union[MetaOapg.properties.organization_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ota_available"]) -> typing.Union[MetaOapg.properties.ota_available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ota_compatible"]) -> typing.Union[MetaOapg.properties.ota_compatible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required_wifi_fw_version"]) -> typing.Union[MetaOapg.properties.required_wifi_fw_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thing"]) -> typing.Union['ArduinoThing', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhooks"]) -> typing.Union['ArduinoDevicev2WebhookCollection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wifi_fw_version"]) -> typing.Union[MetaOapg.properties.wifi_fw_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["href", "id", "label", "name", "serial", "type", "user_id", "connection_type", "created_at", "events", "fqbn", "last_activity_at", "latest_wifi_fw_version", "metadata", "no_sketch", "organization_id", "ota_available", "ota_compatible", "required_wifi_fw_version", "tags", "thing", "webhooks", "wifi_fw_version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        serial: typing.Union[MetaOapg.properties.serial, str, ],
        user_id: typing.Union[MetaOapg.properties.user_id, str, uuid.UUID, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        href: typing.Union[MetaOapg.properties.href, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        connection_type: typing.Union[MetaOapg.properties.connection_type, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        events: typing.Union['ArduinoDevicev2SimplePropertiesCollection', schemas.Unset] = schemas.unset,
        fqbn: typing.Union[MetaOapg.properties.fqbn, str, schemas.Unset] = schemas.unset,
        last_activity_at: typing.Union[MetaOapg.properties.last_activity_at, str, datetime, schemas.Unset] = schemas.unset,
        latest_wifi_fw_version: typing.Union[MetaOapg.properties.latest_wifi_fw_version, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        no_sketch: typing.Union[MetaOapg.properties.no_sketch, bool, schemas.Unset] = schemas.unset,
        organization_id: typing.Union[MetaOapg.properties.organization_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        ota_available: typing.Union[MetaOapg.properties.ota_available, bool, schemas.Unset] = schemas.unset,
        ota_compatible: typing.Union[MetaOapg.properties.ota_compatible, bool, schemas.Unset] = schemas.unset,
        required_wifi_fw_version: typing.Union[MetaOapg.properties.required_wifi_fw_version, str, schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        thing: typing.Union['ArduinoThing', schemas.Unset] = schemas.unset,
        webhooks: typing.Union['ArduinoDevicev2WebhookCollection', schemas.Unset] = schemas.unset,
        wifi_fw_version: typing.Union[MetaOapg.properties.wifi_fw_version, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ArduinoDevicev2':
        return super().__new__(
            cls,
            *_args,
            serial=serial,
            user_id=user_id,
            name=name,
            href=href,
            id=id,
            label=label,
            type=type,
            connection_type=connection_type,
            created_at=created_at,
            events=events,
            fqbn=fqbn,
            last_activity_at=last_activity_at,
            latest_wifi_fw_version=latest_wifi_fw_version,
            metadata=metadata,
            no_sketch=no_sketch,
            organization_id=organization_id,
            ota_available=ota_available,
            ota_compatible=ota_compatible,
            required_wifi_fw_version=required_wifi_fw_version,
            tags=tags,
            thing=thing,
            webhooks=webhooks,
            wifi_fw_version=wifi_fw_version,
            _configuration=_configuration,
            **kwargs,
        )

from iot_api_client.model.arduino_devicev2_simple_properties_collection import ArduinoDevicev2SimplePropertiesCollection
from iot_api_client.model.arduino_devicev2_webhook_collection import ArduinoDevicev2WebhookCollection
from iot_api_client.model.arduino_thing import ArduinoThing
