# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iot_api_client import schemas  # noqa: F401


class ArduinoCompressedv2(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    compressed contains the info from which to generate the certificate (default view)
    """


    class MetaOapg:
        required = {
            "not_after",
            "serial",
            "signature",
            "not_before",
            "signature_asn1_x",
            "signature_asn1_y",
        }
        
        class properties:
            not_after = schemas.DateTimeSchema
            not_before = schemas.DateTimeSchema
            serial = schemas.StrSchema
            signature = schemas.StrSchema
            signature_asn1_x = schemas.StrSchema
            signature_asn1_y = schemas.StrSchema
            authority_key_identifier = schemas.StrSchema
            __annotations__ = {
                "not_after": not_after,
                "not_before": not_before,
                "serial": serial,
                "signature": signature,
                "signature_asn1_x": signature_asn1_x,
                "signature_asn1_y": signature_asn1_y,
                "authority_key_identifier": authority_key_identifier,
            }
    
    not_after: MetaOapg.properties.not_after
    serial: MetaOapg.properties.serial
    signature: MetaOapg.properties.signature
    not_before: MetaOapg.properties.not_before
    signature_asn1_x: MetaOapg.properties.signature_asn1_x
    signature_asn1_y: MetaOapg.properties.signature_asn1_y
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["not_after"]) -> MetaOapg.properties.not_after: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["not_before"]) -> MetaOapg.properties.not_before: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial"]) -> MetaOapg.properties.serial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature_asn1_x"]) -> MetaOapg.properties.signature_asn1_x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature_asn1_y"]) -> MetaOapg.properties.signature_asn1_y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authority_key_identifier"]) -> MetaOapg.properties.authority_key_identifier: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["not_after", "not_before", "serial", "signature", "signature_asn1_x", "signature_asn1_y", "authority_key_identifier", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["not_after"]) -> MetaOapg.properties.not_after: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["not_before"]) -> MetaOapg.properties.not_before: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial"]) -> MetaOapg.properties.serial: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature_asn1_x"]) -> MetaOapg.properties.signature_asn1_x: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature_asn1_y"]) -> MetaOapg.properties.signature_asn1_y: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authority_key_identifier"]) -> typing.Union[MetaOapg.properties.authority_key_identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["not_after", "not_before", "serial", "signature", "signature_asn1_x", "signature_asn1_y", "authority_key_identifier", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        not_after: typing.Union[MetaOapg.properties.not_after, str, datetime, ],
        serial: typing.Union[MetaOapg.properties.serial, str, ],
        signature: typing.Union[MetaOapg.properties.signature, str, ],
        not_before: typing.Union[MetaOapg.properties.not_before, str, datetime, ],
        signature_asn1_x: typing.Union[MetaOapg.properties.signature_asn1_x, str, ],
        signature_asn1_y: typing.Union[MetaOapg.properties.signature_asn1_y, str, ],
        authority_key_identifier: typing.Union[MetaOapg.properties.authority_key_identifier, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ArduinoCompressedv2':
        return super().__new__(
            cls,
            *_args,
            not_after=not_after,
            serial=serial,
            signature=signature,
            not_before=not_before,
            signature_asn1_x=signature_asn1_x,
            signature_asn1_y=signature_asn1_y,
            authority_key_identifier=authority_key_identifier,
            _configuration=_configuration,
            **kwargs,
        )
