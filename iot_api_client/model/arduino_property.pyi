# coding: utf-8

"""
    Arduino IoT Cloud API

     Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iot_api_client import schemas  # noqa: F401


class ArduinoProperty(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ArduinoProperty media type (default view)
    """


    class MetaOapg:
        required = {
            "update_strategy",
            "thing_id",
            "name",
            "permission",
            "href",
            "id",
            "type",
        }
        
        class properties:
            href = schemas.StrSchema
            id = schemas.UUIDSchema
            name = schemas.StrSchema
            permission = schemas.StrSchema
            thing_id = schemas.UUIDSchema
            type = schemas.StrSchema
            update_strategy = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            deleted_at = schemas.DateTimeSchema
            last_value = schemas.AnyTypeSchema
            linked_to_trigger = schemas.BoolSchema
            max_value = schemas.Float64Schema
            min_value = schemas.Float64Schema
            persist = schemas.BoolSchema
            sync_id = schemas.UUIDSchema
            tag = schemas.Float64Schema
            thing_name = schemas.StrSchema
            update_parameter = schemas.Float64Schema
            updated_at = schemas.DateTimeSchema
            value_updated_at = schemas.DateTimeSchema
            variable_name = schemas.StrSchema
            __annotations__ = {
                "href": href,
                "id": id,
                "name": name,
                "permission": permission,
                "thing_id": thing_id,
                "type": type,
                "update_strategy": update_strategy,
                "created_at": created_at,
                "deleted_at": deleted_at,
                "last_value": last_value,
                "linked_to_trigger": linked_to_trigger,
                "max_value": max_value,
                "min_value": min_value,
                "persist": persist,
                "sync_id": sync_id,
                "tag": tag,
                "thing_name": thing_name,
                "update_parameter": update_parameter,
                "updated_at": updated_at,
                "value_updated_at": value_updated_at,
                "variable_name": variable_name,
            }
    
    update_strategy: MetaOapg.properties.update_strategy
    thing_id: MetaOapg.properties.thing_id
    name: MetaOapg.properties.name
    permission: MetaOapg.properties.permission
    href: MetaOapg.properties.href
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thing_id"]) -> MetaOapg.properties.thing_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_strategy"]) -> MetaOapg.properties.update_strategy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted_at"]) -> MetaOapg.properties.deleted_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_value"]) -> MetaOapg.properties.last_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linked_to_trigger"]) -> MetaOapg.properties.linked_to_trigger: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_value"]) -> MetaOapg.properties.max_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_value"]) -> MetaOapg.properties.min_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persist"]) -> MetaOapg.properties.persist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sync_id"]) -> MetaOapg.properties.sync_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thing_name"]) -> MetaOapg.properties.thing_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_parameter"]) -> MetaOapg.properties.update_parameter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value_updated_at"]) -> MetaOapg.properties.value_updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variable_name"]) -> MetaOapg.properties.variable_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["href", "id", "name", "permission", "thing_id", "type", "update_strategy", "created_at", "deleted_at", "last_value", "linked_to_trigger", "max_value", "min_value", "persist", "sync_id", "tag", "thing_name", "update_parameter", "updated_at", "value_updated_at", "variable_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thing_id"]) -> MetaOapg.properties.thing_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_strategy"]) -> MetaOapg.properties.update_strategy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted_at"]) -> typing.Union[MetaOapg.properties.deleted_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_value"]) -> typing.Union[MetaOapg.properties.last_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linked_to_trigger"]) -> typing.Union[MetaOapg.properties.linked_to_trigger, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_value"]) -> typing.Union[MetaOapg.properties.max_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_value"]) -> typing.Union[MetaOapg.properties.min_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persist"]) -> typing.Union[MetaOapg.properties.persist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sync_id"]) -> typing.Union[MetaOapg.properties.sync_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thing_name"]) -> typing.Union[MetaOapg.properties.thing_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_parameter"]) -> typing.Union[MetaOapg.properties.update_parameter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value_updated_at"]) -> typing.Union[MetaOapg.properties.value_updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variable_name"]) -> typing.Union[MetaOapg.properties.variable_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["href", "id", "name", "permission", "thing_id", "type", "update_strategy", "created_at", "deleted_at", "last_value", "linked_to_trigger", "max_value", "min_value", "persist", "sync_id", "tag", "thing_name", "update_parameter", "updated_at", "value_updated_at", "variable_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_strategy: typing.Union[MetaOapg.properties.update_strategy, str, ],
        thing_id: typing.Union[MetaOapg.properties.thing_id, str, uuid.UUID, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        permission: typing.Union[MetaOapg.properties.permission, str, ],
        href: typing.Union[MetaOapg.properties.href, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        deleted_at: typing.Union[MetaOapg.properties.deleted_at, str, datetime, schemas.Unset] = schemas.unset,
        last_value: typing.Union[MetaOapg.properties.last_value, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        linked_to_trigger: typing.Union[MetaOapg.properties.linked_to_trigger, bool, schemas.Unset] = schemas.unset,
        max_value: typing.Union[MetaOapg.properties.max_value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        min_value: typing.Union[MetaOapg.properties.min_value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        persist: typing.Union[MetaOapg.properties.persist, bool, schemas.Unset] = schemas.unset,
        sync_id: typing.Union[MetaOapg.properties.sync_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        thing_name: typing.Union[MetaOapg.properties.thing_name, str, schemas.Unset] = schemas.unset,
        update_parameter: typing.Union[MetaOapg.properties.update_parameter, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        value_updated_at: typing.Union[MetaOapg.properties.value_updated_at, str, datetime, schemas.Unset] = schemas.unset,
        variable_name: typing.Union[MetaOapg.properties.variable_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ArduinoProperty':
        return super().__new__(
            cls,
            *_args,
            update_strategy=update_strategy,
            thing_id=thing_id,
            name=name,
            permission=permission,
            href=href,
            id=id,
            type=type,
            created_at=created_at,
            deleted_at=deleted_at,
            last_value=last_value,
            linked_to_trigger=linked_to_trigger,
            max_value=max_value,
            min_value=min_value,
            persist=persist,
            sync_id=sync_id,
            tag=tag,
            thing_name=thing_name,
            update_parameter=update_parameter,
            updated_at=updated_at,
            value_updated_at=value_updated_at,
            variable_name=variable_name,
            _configuration=_configuration,
            **kwargs,
        )
