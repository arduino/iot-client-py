# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BatchQueryRawRequestMediaV1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_from': 'datetime',
        'q': 'str',
        'series_limit': 'int',
        'sort': 'str',
        'to': 'datetime'
    }

    attribute_map = {
        '_from': 'from',
        'q': 'q',
        'series_limit': 'series_limit',
        'sort': 'sort',
        'to': 'to'
    }

    def __init__(self, _from=None, q=None, series_limit=None, sort='DESC', to=None):  # noqa: E501
        """BatchQueryRawRequestMediaV1 - a model defined in OpenAPI"""  # noqa: E501

        self.__from = None
        self._q = None
        self._series_limit = None
        self._sort = None
        self._to = None
        self.discriminator = None

        if _from is not None:
            self._from = _from
        self.q = q
        if series_limit is not None:
            self.series_limit = series_limit
        if sort is not None:
            self.sort = sort
        if to is not None:
            self.to = to

    @property
    def _from(self):
        """Gets the _from of this BatchQueryRawRequestMediaV1.  # noqa: E501

        From timestamp  # noqa: E501

        :return: The _from of this BatchQueryRawRequestMediaV1.  # noqa: E501
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this BatchQueryRawRequestMediaV1.

        From timestamp  # noqa: E501

        :param _from: The _from of this BatchQueryRawRequestMediaV1.  # noqa: E501
        :type: datetime
        """

        self.__from = _from

    @property
    def q(self):
        """Gets the q of this BatchQueryRawRequestMediaV1.  # noqa: E501

        Query  # noqa: E501

        :return: The q of this BatchQueryRawRequestMediaV1.  # noqa: E501
        :rtype: str
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this BatchQueryRawRequestMediaV1.

        Query  # noqa: E501

        :param q: The q of this BatchQueryRawRequestMediaV1.  # noqa: E501
        :type: str
        """
        if q is None:
            raise ValueError("Invalid value for `q`, must not be `None`")  # noqa: E501

        self._q = q

    @property
    def series_limit(self):
        """Gets the series_limit of this BatchQueryRawRequestMediaV1.  # noqa: E501

        Max of values  # noqa: E501

        :return: The series_limit of this BatchQueryRawRequestMediaV1.  # noqa: E501
        :rtype: int
        """
        return self._series_limit

    @series_limit.setter
    def series_limit(self, series_limit):
        """Sets the series_limit of this BatchQueryRawRequestMediaV1.

        Max of values  # noqa: E501

        :param series_limit: The series_limit of this BatchQueryRawRequestMediaV1.  # noqa: E501
        :type: int
        """

        self._series_limit = series_limit

    @property
    def sort(self):
        """Gets the sort of this BatchQueryRawRequestMediaV1.  # noqa: E501

        Sorting  # noqa: E501

        :return: The sort of this BatchQueryRawRequestMediaV1.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this BatchQueryRawRequestMediaV1.

        Sorting  # noqa: E501

        :param sort: The sort of this BatchQueryRawRequestMediaV1.  # noqa: E501
        :type: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"  # noqa: E501
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def to(self):
        """Gets the to of this BatchQueryRawRequestMediaV1.  # noqa: E501

        To timestamp  # noqa: E501

        :return: The to of this BatchQueryRawRequestMediaV1.  # noqa: E501
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this BatchQueryRawRequestMediaV1.

        To timestamp  # noqa: E501

        :param to: The to of this BatchQueryRawRequestMediaV1.  # noqa: E501
        :type: datetime
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchQueryRawRequestMediaV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
