# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Thing(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_id': 'str',
        'id': 'str',
        'name': 'str',
        'webhook_active': 'bool',
        'webhook_uri': 'str'
    }

    attribute_map = {
        'device_id': 'device_id',
        'id': 'id',
        'name': 'name',
        'webhook_active': 'webhook_active',
        'webhook_uri': 'webhook_uri'
    }

    def __init__(self, device_id=None, id=None, name=None, webhook_active=None, webhook_uri=None):  # noqa: E501
        """Thing - a model defined in OpenAPI"""  # noqa: E501

        self._device_id = None
        self._id = None
        self._name = None
        self._webhook_active = None
        self._webhook_uri = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if webhook_active is not None:
            self.webhook_active = webhook_active
        if webhook_uri is not None:
            self.webhook_uri = webhook_uri

    @property
    def device_id(self):
        """Gets the device_id of this Thing.  # noqa: E501

        The arn of the associated device  # noqa: E501

        :return: The device_id of this Thing.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Thing.

        The arn of the associated device  # noqa: E501

        :param device_id: The device_id of this Thing.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def id(self):
        """Gets the id of this Thing.  # noqa: E501

        The id of the thing  # noqa: E501

        :return: The id of this Thing.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Thing.

        The id of the thing  # noqa: E501

        :param id: The id of this Thing.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Thing.  # noqa: E501

        The friendly name of the thing  # noqa: E501

        :return: The name of this Thing.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Thing.

        The friendly name of the thing  # noqa: E501

        :param name: The name of this Thing.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and not re.search(r'[a-zA-Z0-9_.@-]+', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9_.@-]+/`")  # noqa: E501

        self._name = name

    @property
    def webhook_active(self):
        """Gets the webhook_active of this Thing.  # noqa: E501

        Webhook uri  # noqa: E501

        :return: The webhook_active of this Thing.  # noqa: E501
        :rtype: bool
        """
        return self._webhook_active

    @webhook_active.setter
    def webhook_active(self, webhook_active):
        """Sets the webhook_active of this Thing.

        Webhook uri  # noqa: E501

        :param webhook_active: The webhook_active of this Thing.  # noqa: E501
        :type: bool
        """

        self._webhook_active = webhook_active

    @property
    def webhook_uri(self):
        """Gets the webhook_uri of this Thing.  # noqa: E501

        Webhook uri  # noqa: E501

        :return: The webhook_uri of this Thing.  # noqa: E501
        :rtype: str
        """
        return self._webhook_uri

    @webhook_uri.setter
    def webhook_uri(self, webhook_uri):
        """Sets the webhook_uri of this Thing.

        Webhook uri  # noqa: E501

        :param webhook_uri: The webhook_uri of this Thing.  # noqa: E501
        :type: str
        """

        self._webhook_uri = webhook_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Thing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
