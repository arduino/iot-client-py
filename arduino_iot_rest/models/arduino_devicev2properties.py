# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ArduinoDevicev2properties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_retention_days': 'float',
        'device_id': 'str',
        'properties': 'list[ArduinoProperty]',
        'user_id': 'str'
    }

    attribute_map = {
        'data_retention_days': 'data_retention_days',
        'device_id': 'deviceId',
        'properties': 'properties',
        'user_id': 'user_id'
    }

    def __init__(self, data_retention_days=None, device_id=None, properties=None, user_id=None):  # noqa: E501
        """ArduinoDevicev2properties - a model defined in OpenAPI"""  # noqa: E501

        self._data_retention_days = None
        self._device_id = None
        self._properties = None
        self._user_id = None
        self.discriminator = None

        self.data_retention_days = data_retention_days
        self.device_id = device_id
        self.properties = properties
        self.user_id = user_id

    @property
    def data_retention_days(self):
        """Gets the data_retention_days of this ArduinoDevicev2properties.  # noqa: E501

        How many days the data will be kept  # noqa: E501

        :return: The data_retention_days of this ArduinoDevicev2properties.  # noqa: E501
        :rtype: float
        """
        return self._data_retention_days

    @data_retention_days.setter
    def data_retention_days(self, data_retention_days):
        """Sets the data_retention_days of this ArduinoDevicev2properties.

        How many days the data will be kept  # noqa: E501

        :param data_retention_days: The data_retention_days of this ArduinoDevicev2properties.  # noqa: E501
        :type: float
        """
        if data_retention_days is None:
            raise ValueError("Invalid value for `data_retention_days`, must not be `None`")  # noqa: E501

        self._data_retention_days = data_retention_days

    @property
    def device_id(self):
        """Gets the device_id of this ArduinoDevicev2properties.  # noqa: E501

        The device of the property  # noqa: E501

        :return: The device_id of this ArduinoDevicev2properties.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ArduinoDevicev2properties.

        The device of the property  # noqa: E501

        :param device_id: The device_id of this ArduinoDevicev2properties.  # noqa: E501
        :type: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def properties(self):
        """Gets the properties of this ArduinoDevicev2properties.  # noqa: E501

        ArduinoPropertyCollection is the media type for an array of ArduinoProperty (default view)  # noqa: E501

        :return: The properties of this ArduinoDevicev2properties.  # noqa: E501
        :rtype: list[ArduinoProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ArduinoDevicev2properties.

        ArduinoPropertyCollection is the media type for an array of ArduinoProperty (default view)  # noqa: E501

        :param properties: The properties of this ArduinoDevicev2properties.  # noqa: E501
        :type: list[ArduinoProperty]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def user_id(self):
        """Gets the user_id of this ArduinoDevicev2properties.  # noqa: E501

        The user id of the owner  # noqa: E501

        :return: The user_id of this ArduinoDevicev2properties.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ArduinoDevicev2properties.

        The user id of the owner  # noqa: E501

        :param user_id: The user_id of this ArduinoDevicev2properties.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArduinoDevicev2properties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
