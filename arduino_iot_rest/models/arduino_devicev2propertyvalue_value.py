# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ArduinoDevicev2propertyvalueValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'payload': 'str',
        'seqno': 'int',
        'statistics': 'ArduinoDevicev2propertyvalueValueStatistics'
    }

    attribute_map = {
        'payload': 'payload',
        'seqno': 'seqno',
        'statistics': 'statistics'
    }

    def __init__(self, payload=None, seqno=None, statistics=None):  # noqa: E501
        """ArduinoDevicev2propertyvalueValue - a model defined in OpenAPI"""  # noqa: E501

        self._payload = None
        self._seqno = None
        self._statistics = None
        self.discriminator = None

        if payload is not None:
            self.payload = payload
        if seqno is not None:
            self.seqno = seqno
        if statistics is not None:
            self.statistics = statistics

    @property
    def payload(self):
        """Gets the payload of this ArduinoDevicev2propertyvalueValue.  # noqa: E501


        :return: The payload of this ArduinoDevicev2propertyvalueValue.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ArduinoDevicev2propertyvalueValue.


        :param payload: The payload of this ArduinoDevicev2propertyvalueValue.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def seqno(self):
        """Gets the seqno of this ArduinoDevicev2propertyvalueValue.  # noqa: E501


        :return: The seqno of this ArduinoDevicev2propertyvalueValue.  # noqa: E501
        :rtype: int
        """
        return self._seqno

    @seqno.setter
    def seqno(self, seqno):
        """Sets the seqno of this ArduinoDevicev2propertyvalueValue.


        :param seqno: The seqno of this ArduinoDevicev2propertyvalueValue.  # noqa: E501
        :type: int
        """

        self._seqno = seqno

    @property
    def statistics(self):
        """Gets the statistics of this ArduinoDevicev2propertyvalueValue.  # noqa: E501


        :return: The statistics of this ArduinoDevicev2propertyvalueValue.  # noqa: E501
        :rtype: ArduinoDevicev2propertyvalueValueStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this ArduinoDevicev2propertyvalueValue.


        :param statistics: The statistics of this ArduinoDevicev2propertyvalueValue.  # noqa: E501
        :type: ArduinoDevicev2propertyvalueValueStatistics
        """

        self._statistics = statistics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArduinoDevicev2propertyvalueValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
