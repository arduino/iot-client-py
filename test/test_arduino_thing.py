# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from iot_api_client.models.arduino_thing import ArduinoThing

class TestArduinoThing(unittest.TestCase):
    """ArduinoThing unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ArduinoThing:
        """Test ArduinoThing
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ArduinoThing`
        """
        model = ArduinoThing()
        if include_optional:
            return ArduinoThing(
                assistant = 'ALEXA',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                device_fqbn = '',
                device_id = '',
                device_name = '',
                device_type = '',
                href = '',
                id = '',
                name = '',
                organization_id = '',
                properties = [
                    iot_api_client.models.mediatype_identifier:_application/vnd/arduino/property+json;_view=default.Mediatype identifier: application/vnd.arduino.property+json; view=default(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        href = '', 
                        id = '', 
                        last_value = null, 
                        linked_to_trigger = True, 
                        max_value = 1.337, 
                        min_value = 1.337, 
                        name = '', 
                        permission = '', 
                        persist = True, 
                        sync_id = '', 
                        tag = 56, 
                        thing_id = '', 
                        thing_name = '', 
                        type = '', 
                        update_parameter = 1.337, 
                        update_strategy = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        value_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        variable_name = '', )
                    ],
                properties_count = 56,
                sketch_id = '',
                tags = { },
                timezone = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user_id = '',
                webhook_active = True,
                webhook_uri = ''
            )
        else:
            return ArduinoThing(
                href = '',
                id = '',
                name = '',
                timezone = '',
                user_id = '',
        )
        """

    def testArduinoThing(self):
        """Test ArduinoThing"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
