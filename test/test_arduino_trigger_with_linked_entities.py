# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from iot_api_client.models.arduino_trigger_with_linked_entities import ArduinoTriggerWithLinkedEntities

class TestArduinoTriggerWithLinkedEntities(unittest.TestCase):
    """ArduinoTriggerWithLinkedEntities unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ArduinoTriggerWithLinkedEntities:
        """Test ArduinoTriggerWithLinkedEntities
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ArduinoTriggerWithLinkedEntities`
        """
        model = ArduinoTriggerWithLinkedEntities()
        if include_optional:
            return ArduinoTriggerWithLinkedEntities(
                actions = [
                    iot_api_client.models.mediatype_identifier:_application/vnd/arduino/action+json;_view=default.Mediatype identifier: application/vnd.arduino.action+json; view=default(
                        created_by = '', 
                        description = '', 
                        email = iot_api_client.models.email_action.email_action(
                            body = iot_api_client.models.body_expression.body_expression(
                                expression = '', 
                                variables = [
                                    iot_api_client.models.variable.variable(
                                        attribute = 'PROPERTY', 
                                        entity = 'PROPERTY', 
                                        id = '', 
                                        placeholder = '', 
                                        property_id = '', 
                                        thing_id = '', )
                                    ], ), 
                            delivery = iot_api_client.models.email_delivery_opts.email_delivery_opts(
                                bcc = [
                                    iot_api_client.models.user_recipient.user_recipient(
                                        id = '', 
                                        username = '', )
                                    ], 
                                cc = [
                                    iot_api_client.models.user_recipient.user_recipient(
                                        id = '', 
                                        username = '', )
                                    ], 
                                to = [
                                    
                                    ], ), 
                            subject = iot_api_client.models.title_expression.title_expression(
                                expression = '', ), ), 
                        id = '', 
                        kind = 'NOTIFY-EMAIL', 
                        name = '', 
                        organization_id = '', 
                        push_notification = iot_api_client.models.push_action.push_action(
                            body = iot_api_client.models.body_expression.body_expression(
                                expression = '', ), 
                            delivery = iot_api_client.models.push_delivery_opts.push_delivery_opts(
                                to = [
                                    
                                    ], ), 
                            title = iot_api_client.models.title_expression.title_expression(
                                expression = '', ), ), 
                        trigger_id = '', )
                    ],
                active = True,
                created_by = '',
                description = '',
                device_status_source = iot_api_client.models.mediatype_identifier:_application/vnd/device_status_source_with_linked_devices+json;_view=default.Mediatype identifier: application/vnd.device_status_source_with_linked_devices+json; view=default(
                    criteria = '', 
                    grace_period_offline = 0, 
                    grace_period_online = 0, 
                    linked_devices = [
                        iot_api_client.models.mediatype_identifier:_application/vnd/arduino/linked_device+json;_view=default.Mediatype identifier: application/vnd.arduino.linked_device+json; view=default(
                            device = iot_api_client.models.mediatype_identifier:_application/vnd/arduino/devicev2+json;_view=default.Mediatype identifier: application/vnd.arduino.devicev2+json; view=default(
                                connection_type = 'wifi', 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                device_status = 'ONLINE', 
                                events = [
                                    iot_api_client.models.mediatype_identifier:_application/vnd/arduino/devicev2/simple/properties+json;_view=default.Mediatype identifier: application/vnd.arduino.devicev2.simple.properties+json; view=default(
                                        name = '', 
                                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        value = null, )
                                    ], 
                                fqbn = '', 
                                href = '', 
                                id = '', 
                                label = '', 
                                last_activity_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                latest_wifi_fw_version = '', 
                                metadata = { }, 
                                name = '', 
                                no_sketch = True, 
                                organization_id = '', 
                                ota_available = True, 
                                ota_compatible = True, 
                                required_wifi_fw_version = '', 
                                serial = '', 
                                tags = { }, 
                                thing = iot_api_client.models.mediatype_identifier:_application/vnd/arduino/thing+json;_view=default.Mediatype identifier: application/vnd.arduino.thing+json; view=default(
                                    assistant = 'ALEXA', 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    device_fqbn = '', 
                                    device_id = '', 
                                    device_name = '', 
                                    device_type = '', 
                                    href = '', 
                                    id = '', 
                                    name = '', 
                                    organization_id = '', 
                                    properties = [
                                        iot_api_client.models.mediatype_identifier:_application/vnd/arduino/property+json;_view=default.Mediatype identifier: application/vnd.arduino.property+json; view=default(
                                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            href = '', 
                                            id = '', 
                                            last_value = null, 
                                            linked_to_trigger = True, 
                                            max_value = 1.337, 
                                            min_value = 1.337, 
                                            name = '', 
                                            permission = '', 
                                            persist = True, 
                                            sync_id = '', 
                                            tag = 56, 
                                            thing_id = '', 
                                            thing_name = '', 
                                            type = '', 
                                            update_parameter = 1.337, 
                                            update_strategy = '', 
                                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            value_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            variable_name = '', )
                                        ], 
                                    properties_count = 56, 
                                    sketch_id = '', 
                                    timezone = '', 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    user_id = '', 
                                    webhook_active = True, 
                                    webhook_uri = '', ), 
                                type = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                user_id = '', 
                                webhooks = [
                                    iot_api_client.models.mediatype_identifier:_application/vnd/arduino/devicev2/webhook+json;_view=default.Mediatype identifier: application/vnd.arduino.devicev2.webhook+json; view=default(
                                        active = True, 
                                        id = '', 
                                        uri = '', )
                                    ], 
                                wifi_fw_version = '', ), 
                            status = 'OK', )
                        ], ),
                id = '',
                linked_property = iot_api_client.models.mediatype_identifier:_application/vnd/arduino/linked_property+json;_view=default.Mediatype identifier: application/vnd.arduino.linked_property+json; view=default(
                    property = iot_api_client.models.mediatype_identifier:_application/vnd/arduino/property+json;_view=default.Mediatype identifier: application/vnd.arduino.property+json; view=default(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        href = '', 
                        id = '', 
                        last_value = null, 
                        linked_to_trigger = True, 
                        max_value = 1.337, 
                        min_value = 1.337, 
                        name = '', 
                        permission = '', 
                        persist = True, 
                        sync_id = '', 
                        tag = 56, 
                        thing_id = '', 
                        thing_name = '', 
                        type = '', 
                        update_parameter = 1.337, 
                        update_strategy = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        value_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        variable_name = '', ), 
                    status = 'OK', ),
                name = '',
                organization_id = ''
            )
        else:
            return ArduinoTriggerWithLinkedEntities(
                id = '',
                name = '',
        )
        """

    def testArduinoTriggerWithLinkedEntities(self):
        """Test ArduinoTriggerWithLinkedEntities"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
