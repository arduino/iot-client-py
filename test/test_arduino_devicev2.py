# coding: utf-8

"""
    Arduino IoT Cloud API

    Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import iot_api_client
from iot_api_client.models.arduino_devicev2 import ArduinoDevicev2  # noqa: E501
from iot_api_client.rest import ApiException

class TestArduinoDevicev2(unittest.TestCase):
    """ArduinoDevicev2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ArduinoDevicev2
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ArduinoDevicev2`
        """
        model = iot_api_client.models.arduino_devicev2.ArduinoDevicev2()  # noqa: E501
        if include_optional :
            return ArduinoDevicev2(
                connection_type = 'wifi', 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                device_status = 'ONLINE', 
                events = [
                    iot_api_client.models.mediatype_identifier:_application/vnd/arduino/devicev2/simple/properties+json;_view=default.Mediatype identifier: application/vnd.arduino.devicev2.simple.properties+json; view=default(
                        name = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        value = null, )
                    ], 
                fqbn = '', 
                href = '', 
                id = '', 
                label = '', 
                last_activity_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                latest_wifi_fw_version = '', 
                metadata = { }, 
                name = '', 
                no_sketch = True, 
                organization_id = '', 
                ota_available = True, 
                ota_compatible = True, 
                required_wifi_fw_version = '', 
                serial = '', 
                tags = { }, 
                thing = iot_api_client.models.mediatype_identifier:_application/vnd/arduino/thing+json;_view=default.Mediatype identifier: application/vnd.arduino.thing+json; view=default(
                    assistant = 'ALEXA', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    device_fqbn = '', 
                    device_id = '', 
                    device_name = '', 
                    device_type = '', 
                    href = '', 
                    id = '', 
                    name = '', 
                    organization_id = '', 
                    properties = [
                        iot_api_client.models.mediatype_identifier:_application/vnd/arduino/property+json;_view=default.Mediatype identifier: application/vnd.arduino.property+json; view=default(
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            href = '', 
                            id = '', 
                            last_value = null, 
                            linked_to_trigger = True, 
                            max_value = 1.337, 
                            min_value = 1.337, 
                            name = '', 
                            permission = '', 
                            persist = True, 
                            sync_id = '', 
                            tag = 56, 
                            thing_id = '', 
                            thing_name = '', 
                            type = '', 
                            update_parameter = 1.337, 
                            update_strategy = '', 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            value_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            variable_name = '', )
                        ], 
                    properties_count = 56, 
                    sketch_id = '', 
                    tags = { }, 
                    timezone = '', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user_id = '', 
                    webhook_active = True, 
                    webhook_uri = '', ), 
                type = '', 
                user_id = '', 
                webhooks = [
                    iot_api_client.models.mediatype_identifier:_application/vnd/arduino/devicev2/webhook+json;_view=default.Mediatype identifier: application/vnd.arduino.devicev2.webhook+json; view=default(
                        active = True, 
                        id = '', 
                        uri = '', )
                    ], 
                wifi_fw_version = ''
            )
        else :
            return ArduinoDevicev2(
                href = '',
                id = '',
                label = '',
                name = '',
                serial = '',
                type = '',
                user_id = '',
        )
        """

    def testArduinoDevicev2(self):
        """Test ArduinoDevicev2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
